{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6982\u8981 \u3053\u306e\u30b5\u30a4\u30c8\u306f\u79c1\u304c\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3057\u3066\u3044\u308bOSS\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068\u30d6\u30ed\u30b0\u3092\u63b2\u8f09\u3057\u3066\u3044\u307e\u3059\u3002 \u3054\u610f\u898b\u3001\u3054\u611f\u60f3\u306fGitHub\u306e Issue \u307e\u305f\u306f X(\u65e7Twitter) \u306b\u3054\u9023\u7d61\u304f\u3060\u3055\u3044\u3002","title":"\u6982\u8981"},{"location":"#_1","text":"\u3053\u306e\u30b5\u30a4\u30c8\u306f\u79c1\u304c\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3057\u3066\u3044\u308bOSS\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068\u30d6\u30ed\u30b0\u3092\u63b2\u8f09\u3057\u3066\u3044\u307e\u3059\u3002 \u3054\u610f\u898b\u3001\u3054\u611f\u60f3\u306fGitHub\u306e Issue \u307e\u305f\u306f X(\u65e7Twitter) \u306b\u3054\u9023\u7d61\u304f\u3060\u3055\u3044\u3002","title":"\u6982\u8981"},{"location":"blog/config-apple-magic-keyboard-in-ubuntu/","text":"Apple Magic Keyboard\u306e\u8a2d\u5b9a \u53c2\u8003\u306e\u8a18\u4e8b\u304c\u6d88\u3048\u305f\u6642\u306b\u5099\u3048\u3066\u3001Apple\u306e\u30c6\u30f3\u30ad\u30fc\u4ed8\u304d\u65e5\u672c\u8a9eMagic Keyboard\u306e\u8a2d\u5b9a\u65b9\u6cd5\u3092\u3053\u3053\u306b\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u30b7\u30b9\u30c6\u30e0\u8a00\u8a9e\u3092\u82f1\u8a9e\u3068\u3057\u307e\u3059\u3002 \u3084\u308a\u65b9 \u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u8a2d\u5b9a \u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3064\u3002 sudo dpkg-reconfigure keyboard-configuration Apple Aluminium (JIS) \u3092\u9078\u629e\u3059\u308b\u3002 Japanese \u3092\u9078\u629e\u3059\u308b\u3002 Japanese - Japanese (Macintosh) \u3092\u9078\u629e\u3059\u308b\u3002 No toggling \u3092\u9078\u629e\u3059\u308b\u3002 No temporary switch \u3092\u9078\u629e\u3059\u308b\u3002 The default for the keyboard layout \u3092\u9078\u629e\u3059\u308b\u3002 No compose key \u3092\u9078\u629e\u3059\u308b\u3002 No \u3092\u9078\u629e\u3059\u308b\u3002 \u3053\u306e\u307e\u307e\u3060\u3068\u300c\u304b\u306a\u300d\u3068\u300c\u82f1\u6570\u300d\u306e\u6319\u52d5\u304c\u9006\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001Mozc\u306e\u8a2d\u5b9a\u3067\u7121\u7406\u3084\u308a\u9006\u306b\u3059\u308b\u3002 Mozc\u306e\u8a2d\u5b9a \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u30ad\u30fc\u30de\u30c3\u30d7\u3092\u5909\u66f4\u3059\u308b\u3002 Deactivate IME \u306b\u3057\u3066\u3044\u308b\u306e\u306f\u534a\u89d2\u82f1\u6570\u3067\u306e\u5165\u529b\u6642\u306b\u5909\u63db\u3092\u7121\u52b9\u306b\u3059\u308b\u305f\u3081\u3002 Mode Key Command DirectInput Eisu Set input mode to Hiragana Precomposition Eisu Set input mode to Hiragana Composition Eisu Set input mode to Hiragana Conversion Eisu Set input mode to Hiragana DirectInput Hiragana Deactivate IME Precomposition Hiragana Deactivate IME Composition Hiragana Deactivate IME Conversion Hiragana Deactivate IME xmodmap\u306e\u8a2d\u5b9a .Xmodmap \u306b\u4ee5\u4e0b\u306e\u884c\u3092\u66f8\u3044\u3066 xmodmap .Xmodmap \u3092\u5b9f\u884c\u3059\u308b\u3068\u3001 Shift \u3068 _ \u3067\u30d0\u30c3\u30af\u30b9\u30e9\u30c3\u30b7\u30e5\u3092\u6253\u3066\u308b\u3088\u3046\u306b\u306a\u308b\u3002 \u3082\u3061\u308d\u3093\u3001 _ \u3092\u62bc\u305b\u3070 _ \u304c\u51fa\u308b\u3002 keycode 97 = underscore backslash underscore backslash \u53c2\u8003 MacBook Air\u3067Ubuntu\u30ad\u30fc\u30dc\u30fc\u30c9\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\u3059\u308b","title":"Apple Magic Keyboard\u306e\u8a2d\u5b9a"},{"location":"blog/config-apple-magic-keyboard-in-ubuntu/#apple-magic-keyboard","text":"\u53c2\u8003\u306e\u8a18\u4e8b\u304c\u6d88\u3048\u305f\u6642\u306b\u5099\u3048\u3066\u3001Apple\u306e\u30c6\u30f3\u30ad\u30fc\u4ed8\u304d\u65e5\u672c\u8a9eMagic Keyboard\u306e\u8a2d\u5b9a\u65b9\u6cd5\u3092\u3053\u3053\u306b\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u30b7\u30b9\u30c6\u30e0\u8a00\u8a9e\u3092\u82f1\u8a9e\u3068\u3057\u307e\u3059\u3002","title":"Apple Magic Keyboard\u306e\u8a2d\u5b9a"},{"location":"blog/config-apple-magic-keyboard-in-ubuntu/#_1","text":"","title":"\u3084\u308a\u65b9"},{"location":"blog/config-apple-magic-keyboard-in-ubuntu/#_2","text":"\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3064\u3002 sudo dpkg-reconfigure keyboard-configuration Apple Aluminium (JIS) \u3092\u9078\u629e\u3059\u308b\u3002 Japanese \u3092\u9078\u629e\u3059\u308b\u3002 Japanese - Japanese (Macintosh) \u3092\u9078\u629e\u3059\u308b\u3002 No toggling \u3092\u9078\u629e\u3059\u308b\u3002 No temporary switch \u3092\u9078\u629e\u3059\u308b\u3002 The default for the keyboard layout \u3092\u9078\u629e\u3059\u308b\u3002 No compose key \u3092\u9078\u629e\u3059\u308b\u3002 No \u3092\u9078\u629e\u3059\u308b\u3002 \u3053\u306e\u307e\u307e\u3060\u3068\u300c\u304b\u306a\u300d\u3068\u300c\u82f1\u6570\u300d\u306e\u6319\u52d5\u304c\u9006\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001Mozc\u306e\u8a2d\u5b9a\u3067\u7121\u7406\u3084\u308a\u9006\u306b\u3059\u308b\u3002","title":"\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u8a2d\u5b9a"},{"location":"blog/config-apple-magic-keyboard-in-ubuntu/#mozc","text":"\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u30ad\u30fc\u30de\u30c3\u30d7\u3092\u5909\u66f4\u3059\u308b\u3002 Deactivate IME \u306b\u3057\u3066\u3044\u308b\u306e\u306f\u534a\u89d2\u82f1\u6570\u3067\u306e\u5165\u529b\u6642\u306b\u5909\u63db\u3092\u7121\u52b9\u306b\u3059\u308b\u305f\u3081\u3002 Mode Key Command DirectInput Eisu Set input mode to Hiragana Precomposition Eisu Set input mode to Hiragana Composition Eisu Set input mode to Hiragana Conversion Eisu Set input mode to Hiragana DirectInput Hiragana Deactivate IME Precomposition Hiragana Deactivate IME Composition Hiragana Deactivate IME Conversion Hiragana Deactivate IME","title":"Mozc\u306e\u8a2d\u5b9a"},{"location":"blog/config-apple-magic-keyboard-in-ubuntu/#xmodmap","text":".Xmodmap \u306b\u4ee5\u4e0b\u306e\u884c\u3092\u66f8\u3044\u3066 xmodmap .Xmodmap \u3092\u5b9f\u884c\u3059\u308b\u3068\u3001 Shift \u3068 _ \u3067\u30d0\u30c3\u30af\u30b9\u30e9\u30c3\u30b7\u30e5\u3092\u6253\u3066\u308b\u3088\u3046\u306b\u306a\u308b\u3002 \u3082\u3061\u308d\u3093\u3001 _ \u3092\u62bc\u305b\u3070 _ \u304c\u51fa\u308b\u3002 keycode 97 = underscore backslash underscore backslash","title":"xmodmap\u306e\u8a2d\u5b9a"},{"location":"blog/config-apple-magic-keyboard-in-ubuntu/#_3","text":"MacBook Air\u3067Ubuntu\u30ad\u30fc\u30dc\u30fc\u30c9\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\u3059\u308b","title":"\u53c2\u8003"},{"location":"blog/how-to-use-alembic/","text":"Alembic\u306e\u4f7f\u3044\u65b9 \u3053\u306e\u8a18\u4e8b\u306fAlembic\u306ev1.8.3\u3092\u53c2\u7167\u3057\u3066\u3044\u307e\u3059\u3002 \u610f\u5473\u304c\u308f\u304b\u3089\u306a\u304f\u3066\u3082\u6700\u5f8c\u307e\u3067\u76ee\u3092\u901a\u3057\u3066\u304b\u3089\u3001\u3082\u3046\u4e00\u5ea6\u8aad\u3080\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002 \u79c1\u304c\u7406\u89e3\u3057\u3066\u3044\u308b PolyMesh (\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5)\u3068 Xform (\u30e1\u30c3\u30b7\u30e5\u306e\u5909\u5f62)\u306b\u95a2\u9023\u3059\u308b\u9805\u76ee\u306e\u307f\u53d6\u308a\u4e0a\u3052\u307e\u3059\u3002 \u307e\u305f\u3001 alembic for realtime rendering \u3084Alembic\u521d\u671f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 alembic - AlembicPoint9UsersGuide.wiki \u3092\u8aad\u3080\u3068\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 Alembic\u3068\u306f Alembic\u306f\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3084\u7269\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306a\u3069\u3092\u884c\u30463DCG\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u9593\u3067\u3084\u308a\u3068\u308a\u51fa\u6765\u308b\u3001 \u6642\u9593\u3054\u3068\u306e\u7269\u4f53\u306e\u5e7e\u4f55\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u305f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3067\u3042\u308b\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u69cb\u6210 Alembic\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u6bce\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u540d\u524d\u7a7a\u9593\u304c\u5206\u3051\u3089\u308c\u3066\u3044\u308b\u3002 \u4ee5\u4e0b\u306e\u8868\u306b\u5fc5\u8981\u306a\u3082\u306e\u3060\u3051\u3092\u629c\u7c8b\u3057\u305f\u3002 \u540d\u524d\u7a7a\u9593 \u5185\u5bb9 Abc Alembic\u306e\u57fa\u672c\u7684\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u63d0\u4f9b\u3059\u308b AbcCoreAbstract \u6642\u9593\u306b\u95a2\u3059\u308b\u30af\u30e9\u30b9\u4ee5\u5916\u30e6\u30fc\u30b6\u30fc\u304c\u898b\u308b\u5fc5\u8981\u306f\u306a\u3044 AbcCoreHDF5 HDF5\u3092\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u306b\u4f7f\u3063\u305f\u5834\u5408\u306e\u5165\u51fa\u529b\u306e\u5b9f\u88c5 AbcCoreLayer Alembic\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u5909\u66f4\u3092\u5225\u306eAlembic\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3093\u3060\u308a\u3001\u8907\u6570\u306eAlembic\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4e00\u3064\u306eAlembic\u30d5\u30a1\u30a4\u30eb\u306b\u307e\u3068\u3081\u308b\u6a5f\u80fd\u306e\u5b9f\u88c5 AbcCoreOgawa Ogawa\u3092\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u306b\u4f7f\u3063\u305f\u5834\u5408\u306e\u5165\u51fa\u529b\u306e\u5b9f\u88c5 AbcGeom Abc\u3092\u4f7f\u3063\u3066\u3001\u7269\u4f53\u306e\u5e7e\u4f55\u60c5\u5831\u3084\u525b\u4f53\u5909\u5f62\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b \u30d5\u30a1\u30a4\u30eb\u306e\u5165\u51fa\u529b\u306b\u3064\u3044\u3066 Ogawa\u306fHDF5\u3088\u308a\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3060\u3068\u5e73\u5747\u30675\u500d\u3001\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3060\u3068\u540c\u3058\u64cd\u4f5c\u3092\u884c\u3063\u305f\u5834\u5408\u3068\u6bd4\u8f03\u3057\u306625\u500d\u901f\u304f\u8aad\u307f\u8fbc\u3080\u3002 \u307e\u305f\u3001\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u304c\u5e73\u5747\u30675-15%\u5c0f\u3055\u304f\u306a\u308a\u3001\u5c0f\u3055\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u591a\u3044\u307b\u3069\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3082\u5c0f\u3055\u304f\u306a\u308b\u3002 \u7279\u306b\u7406\u7531\u304c\u306a\u3051\u308c\u3070\u3001Ogawa\u3092\u4f7f\u3046\u3053\u3068\u3092\u304a\u52e7\u3081\u3059\u308b\u3002 AbcCoreLayer\u3067\u51fa\u6765\u308b\u3053\u3068 \u4ee5\u4e0b\u306e\u8868\u306b\u5217\u6319\u3059\u308b\u3002 \u51fa\u6765\u308b\u3053\u3068 \u4f8b \u5f62\u72b6\u306b\u8ffd\u52a0\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\u3067\u304d\u308b UV\u304c\u306a\u3044\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u306bUV\u3092\u8ffd\u52a0 \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u4e0a\u66f8\u304d \u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u4e0a\u306e\u9759\u7684\u306a\u70b9\u3092\u52d5\u304f\u70b9\u306b\u5909\u66f4 \u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8ffd\u52a0 \u65b0\u3057\u3044\u5f62\u72b6\u3092\u65e2\u5b58\u306e\u968e\u5c64\u306b\u8ffd\u52a0 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u524a\u9664 \u597d\u307f\u3058\u3083\u306a\u3044\u5f62\u72b6\u3084\u968e\u5c64\u306e\u30d6\u30e9\u30f3\u30c1\u5168\u4f53\u306e\u524a\u9664 \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u524a\u9664 \u4e0d\u6b63\u306a\u6cd5\u7dda\u306e\u524a\u9664 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u968e\u5c64\u306e\u7f6e\u304d\u63db\u3048 \u5206\u3051\u3089\u308c\u305f\u66f2\u7dda\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u4e00\u3064\u306e\u5927\u304d\u306a\u66f2\u7dda\u306b\u7f6e\u304d\u63db\u3048\u308b \u30d7\u30ed\u30d1\u30c6\u30a3\u968e\u5c64\u306e\u7f6e\u304d\u63db\u3048 \u30e6\u30fc\u30b6\u30fc\u30d7\u30ed\u30d1\u30c6\u30a3\u5185\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4ed6\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u7f6e\u304d\u63db\u3048\u308b \u307e\u305f\u3001Alembic\u30d5\u30a1\u30a4\u30eb\u306f\u8ffd\u8a18\u304c\u51fa\u6765\u306a\u3044\u305f\u3081\u3001 Points \u306a\u3069\u6642\u7cfb\u5217\u3067\u4fdd\u5b58\u3067\u304d\u306a\u3044\u5834\u5408\u306f\u6642\u7cfb\u5217\u9806\u306b\u30d5\u30a1\u30a4\u30eb\u306b\u540d\u524d\u3092\u4ed8\u3051\u3066\u3001\u3053\u306e\u6a5f\u80fd\u3067\u8aad\u307f\u8fbc\u3080\u3068\u826f\u3044\u3002 AbcCoreLayer\u306f MetaData \u3092\u9069\u5207\u306b\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306b\u3001 Util.h \u5185\u306b SetPrune \u3068 SetReplace \u3068\u3044\u3046\u4fbf\u5229\u306a\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3089\u3057\u3044\u3002 \u4e3b\u306a\u6982\u5ff5 Alembic\u3067\u306f\u3001\u5165\u529b\u6642\u306b\u4f7f\u3046\u30af\u30e9\u30b9\u306b\u306f I \u304c\u3001\u51fa\u529b\u6642\u306b\u4f7f\u3046\u3082\u306e\u306b\u306f O \u304c\u540d\u524d\u306e\u5148\u982d\u306b\u4ed8\u304f\u3002 \u3053\u3053\u3067\u306f\u533a\u5225\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u305f\u3081\u3001\u7701\u7565\u3059\u308b\u3002 Archive \u30c7\u30a3\u30b9\u30af\u4e0a\u306e\u5b9f\u969b\u306e\u30d5\u30a1\u30a4\u30eb\u3002 \u3059\u3079\u3066\u306e\u30b7\u30fc\u30f3\u30c7\u30fc\u30bf\u3092\u6301\u3064\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u30b3\u30f3\u30c6\u30ca\u3002 1\u3064\u306e Object \u3092\u6301\u3064\u3002 Object Alembic\u306e\u968e\u5c64\u306e\u4e3b\u306a\u5358\u4f4d\u3002 Object \u306f Archive \u306e Object \u3092\u30eb\u30fc\u30c8\u3068\u3057\u305f\u591a\u5206\u6728\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u89aa\u3068\u5b50\u4f9b\u305f\u3061\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3002 1\u3064\u306e CompoundProperty \u3092\u6301\u3064\u3002 ObjectHeader \u3068\u547c\u3070\u308c\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u6301\u3061\u3001 SchemaObject \u3092\u5224\u5b9a\u3059\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u308b\u3002 Schema \u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u3088\u3046\u306a\u3001\u3042\u308b\u8907\u96d1\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u4f5c\u3089\u308c\u305f CompoundProperty \u3002 SchemaObject Schema \u3092 CompundProperty \u3068\u3057\u3066\u6301\u3064 Object \u306e\u3053\u3068\u3002 Property Simple\u3068Compound\u306e2\u7a2e\u985e\u306e\u578b\u304c\u3042\u308b\u3002 \u5024\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f SampleSelector \u3068\u3044\u3046\u3001\u3042\u308b\u6642\u70b9\u306e\u6642\u523b\u3092\u8868\u3059\u30af\u30e9\u30b9\u3092\u4e0e\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002 Simple Property Scalar\u3068Array\u306e2\u7a2e\u985e\u3042\u308b\u3002 ScalarProperty \u578b\u3068\u8981\u7d20\u306e\u6570\u304c\u56fa\u5b9a\u3055\u308c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u307e\u308b\u8907\u6570\u306eSample\u3092\u6301\u3064\u3002 \u4f8b\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u304c\u3042\u308b\u3002 FloatProperty (\u5404Sample\u306f32\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570; \u9577\u3055 1) StringProperty (\u5404Sample\u306f\u4efb\u610f\u306e\u9577\u3055\u3092\u6301\u3064\u30011\u3064\u306estring; \u9577\u3055 1) M44dProperty (\u5404Sample\u306f16\u500b\u306e64\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570; \u9577\u3055 16) \u4ee5\u4e0b\u306e3\u3064\u306eSample\u3092\u6301\u3064Property \u525b\u4f53\u306e\u8cea\u91cf(1\u3064\u306e\u6570\u5024; \u9577\u3055 1) \u8272(\u5024\u304c\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306eRGB\u306e\u30d9\u30af\u30c8\u30eb;\u9577\u3055 3) \u30d0\u30a6\u30f3\u30c7\u30a3\u30f3\u30b0\u30dc\u30c3\u30af\u30b9(\u5024\u304c\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e2\u3064\u306e3\u6b21\u5143\u30d9\u30af\u30c8\u30eb; \u9577\u3055 6) ScalarProperty\u306e\u6700\u5927\u306e\u9577\u3055\u306f256\u3067\u3042\u308b\u3002 TypedArrayProperty \u6642\u523b\u6bce\u306e Sample \u3092\u6301\u3064 Property \u3002 ArrayProperty \u3082\u3042\u308b\u304c\u3001\u4e3b\u306b\u4f7f\u3046\u306e\u306f\u3053\u3063\u3061\u306e\u65b9\u3002 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5024\u306e\u578b(\u6b63\u78ba\u306b\u306f TypedPropertyTraits.h \u3067\u5b9a\u7fa9\u3055\u308c\u305f\u578b)\u304c\u5165\u3063\u3066\u3044\u308b\u3002 \u4f8b\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u304c\u3042\u308b\u3002 DoubleArrayProperty (\u5404\u6642\u523b\u3067\u3001\u8981\u7d20\u304c1\u3064\u306e64\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u914d\u5217\u3092\u6301\u3064) V3fArrayProperty (\u5404\u6642\u523b\u3067\u3001\u8981\u7d20\u304c1\u3064\u306e Imath::Vec3f (3\u3064\u306e32\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570)\u306e\u914d\u5217\u3092\u6301\u3064) M44fArrayProperty (\u5404\u6642\u523b\u3067\u3001\u8981\u7d20\u304c1\u3064\u306e Imath::M44f (16\u500b\u306e32\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570)\u306e\u914d\u5217\u3092\u6301\u3064) \u591a\u89d2\u5f62\u30e1\u30c3\u30b7\u30e5\u306e\u9802\u70b9\u306e\u30ea\u30b9\u30c8 \u6d41\u4f53\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7c92\u5b50\u306e\u30ea\u30b9\u30c8 \u305f\u3060\u3057\u3001\u540c\u3058Sample\u3092\u4fdd\u5b58\u3057\u306a\u3044\u3002 CompoundProperty ( CompoundProperty \u3092\u542b\u3080)\u8907\u6570\u306eProperty\u3092\u6301\u3064Property\u3002 Sample \u3042\u308b\u6642\u523b\u306e\u751f\u306e\u30c7\u30fc\u30bf\u3002 Property\u3068\u540c\u69d8\u306b\u3001Sample\u3082Scalar\u3068Array\u306e2\u7a2e\u985e\u3042\u308b\u3002 \u4f8b\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u304c\u3042\u308b\u3002 DoubleArraySample (\u8981\u7d20\u304c1\u3064\u306e64\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u914d\u5217) V3fArraySample (\u8981\u7d20\u304c1\u3064\u306e Imath::Vec3f (3\u3064\u306e32\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570)\u306e\u914d\u5217) M44fArraySample (\u8981\u7d20\u304c1\u3064\u306e Imath::M44f (16\u500b\u306e32\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570)\u306e\u914d\u5217) TimeSampling Property\u304c\u6301\u3064\u6642\u9593\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9\u3002 \u6642\u9593\u306e\u914d\u5217\u3068 TimeSamplingType \u3092\u6301\u3064\u3002 TimeSamplingType \u306e\u7a2e\u985e\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002 TimeSamplingType \u610f\u5473 Uniform (\u4e00\u69d8) Sample\u9593\u306e\u6642\u9593\u9593\u9694\u304c\u4e00\u5b9a Cyclic (\u5468\u671f\u7684) Sample\u9593\u306e\u6642\u9593\u9593\u9694\u304c\u5468\u671f\u7684\u306b\u5909\u5316\u3059\u308b Acyclic (\u4e0d\u898f\u5247) Sample\u9593\u306e\u6642\u9593\u9593\u9694\u304c\u4e0d\u898f\u5247\u306b\u5909\u5316\u3059\u308b SampleSelector Property\u5185\u306eSample\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30af\u30e9\u30b9\u3002 TimeSampling \u304c\u6301\u3064\u6642\u9593\u306e\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u76f4\u63a5\u4e0e\u3048\u308b\u304b\u3001\u6642\u523b\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u4f5c\u308b\u3002 \u6642\u523b\u3092\u6e21\u3059\u5834\u5408\u3001\u8ffd\u52a0\u3067 TimeIndexType \u30d5\u30e9\u30b0\u3092\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u308b\u3002 TimeIndexType \u30d5\u30e9\u30b0\u306e\u610f\u5473\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002 TimeIndexType \u610f\u5473 kNearIndex \u4e0e\u3048\u3089\u308c\u305f\u6642\u523b\u306b\u6700\u3082\u8fd1\u3044\u6642\u523b\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 kFloorIndex \u4e0e\u3048\u3089\u308c\u305f\u6642\u523b\u3088\u308a\u5927\u304d\u304f\u306a\u3044\u3001\u6700\u5927\u306e\u6642\u523b\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 kCeilIndex \u4e0e\u3048\u3089\u308c\u305f\u6642\u523b\u3088\u308a\u5c0f\u3055\u304f\u306a\u3044\u3001\u6700\u5c0f\u306e\u6642\u523b\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 \u4e3b\u306a\u30b9\u30ad\u30fc\u30de\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 PolyMesh \u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u3092\u7ba1\u7406\u3059\u308b\u30b9\u30ad\u30fc\u30de\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002 \u6642\u523b\u6bce\u306b\u9802\u70b9\u3001\u9762\u3001\u9802\u70b9\u3084\u9762\u306e\u6cd5\u7dda\u3092\u6301\u3061\u3001UV\u3001\u9802\u70b9\u3054\u3068\u306e\u901f\u5ea6\u3001AABB\u3082\u6301\u3064\u3053\u3068\u304c\u51fa\u6765\u308b\u3002 PolyMeshSchema PolyMesh \u306e\u30b9\u30ad\u30fc\u30de\u3067\u3001 PolyMesh \u30af\u30e9\u30b9\u306e getSchema \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002 \u3053\u306e\u30af\u30e9\u30b9\u306e getTopologyVariance \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u304c\u5909\u5316\u3059\u308b\u304b\u5224\u5b9a\u3067\u304d\u308b\u3002 \u4ee5\u4e0b\u306f\u623b\u308a\u5024\u3068\u305d\u306e\u610f\u5473\u306e\u8868\u3067\u3042\u308b\u3002 \u623b\u308a\u5024\u306f\u540d\u524d\u7a7a\u9593 Alembic::AbcGeom::MeshTopologyVariance \u3092\u7701\u7565\u3057\u3066\u3044\u308b\u3002 \u623b\u308a\u5024 \u610f\u5473 kConstantTopology \u5909\u5316\u3057\u306a\u3044 kHomogen(e)ousTopology \u9802\u70b9\u306e\u4f4d\u7f6e\u306f\u5909\u308f\u308b\u304c\u3001\u30c8\u30dd\u30ed\u30b8\u30fc\u306f\u5909\u5316\u3057\u306a\u3044 kHeterogen(e)ousTopology \u9802\u70b9\u306e\u4f4d\u7f6e\u3082\u30c8\u30dd\u30ed\u30b8\u30fc\u3082\u5909\u5316\u3059\u308b XformSchema \u3068\u540c\u3058\u3088\u3046\u306b\u3001 getValue \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u6642\u523b\u306e\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u3092\u53d6\u5f97\u3067\u304d\u308b\u304c\u3001\u3044\u304f\u3064\u304b\u6ce8\u610f\u70b9\u304c\u3042\u308b\u3002 \u9762 Alembic\u3067\u306f\u3001\u4efb\u610f\u306e\u591a\u89d2\u5f62\u3092\u6301\u3064\u3053\u3068\u304c\u51fa\u6765\u308b\u3002 \u3064\u307e\u308a\u3001\u4e09\u89d2\u5f62\u3084\u56db\u89d2\u5f62\u3092\u6301\u3064\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u3092Alembic\u306b\u4fdd\u5b58\u3067\u304d\u308b\u3002 \u3053\u306e\u3053\u3068\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u3001\u9762\u3092\u4ee5\u4e0b\u306e\u30ea\u30b9\u30c8\u3067\u8868\u73fe\u3057\u3066\u3044\u308b\u3002 \u305d\u308c\u305e\u308c\u306e\u9762\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6301\u3064 1\u6b21\u5143 \u306e\u30ea\u30b9\u30c8 \u305d\u308c\u305e\u308c\u306e\u9762\u306b\u542b\u307e\u308c\u308b\u9802\u70b9\u306e\u500b\u6570\u306e\u30ea\u30b9\u30c8 1\u3064\u76ee\u306e\u30ea\u30b9\u30c8\u306f\u9762\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u30ea\u30b9\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5bfe\u5fdc\u3055\u305b\u305f2\u6b21\u5143\u306e\u30ea\u30b9\u30c8\u3092\u30d5\u30e9\u30c3\u30c8\u306b\u3057\u305f\u3082\u306e\u3067\u3082\u3042\u308b\u3002 \u5177\u4f53\u4f8b\u3068\u3057\u3066\u3001\u4e09\u89d2\u5f62\u3068\u56db\u89d2\u5f62\u3092\u305d\u308c\u305e\u308c1\u3064\u305a\u3064\u6301\u3061\u30011\u8fba\u3092\u5171\u6709\u3059\u308b\u30e1\u30c3\u30b7\u30e5\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002 [0, 1, 2, 1, 3, 4, 2] [3, 4] 1\u3064\u76ee\u306e\u30ea\u30b9\u30c8\u3092\u6301\u3064Property\u306f getFaceIndicesProperty \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u53d6\u5f97\u3067\u304d\u30012\u3064\u76ee\u306e\u30ea\u30b9\u30c8\u3092\u6301\u3064Property\u306f getFaceIndicesProperty \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002 \u6cd5\u7dda \u5b9f\u306f\u6cd5\u7dda\u3068UV\u306f\u3053\u308c\u307e\u3067\u8aac\u660e\u3057\u3066\u304d\u305f\u30af\u30e9\u30b9\u306e\u3069\u308c\u3067\u3082\u306a\u3044\u3002 \u6cd5\u7dda\u306f TypedGeomParam \u3068\u3044\u3046Schema\u306b\u4f3c\u305f\u3088\u3046\u306a\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3001 PolyMeshSchema \u30af\u30e9\u30b9\u306e getNormalsParam \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002 \u6cd5\u7dda\u306e\u5024\u306e\u610f\u5473\u306f TypedGeomParam \u30af\u30e9\u30b9\u306e getScope \u306e\u623b\u308a\u5024\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3002 \u623b\u308a\u5024 \u610f\u5473 kConstantScope \u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u5168\u4f53\u30671\u3064\u3060\u3051\u306e\u5024 kUniformScope \u5404\u591a\u89d2\u5f62\u306b\u5bfe\u3057\u30661\u3064\u306e\u5024 kVaryingScope, kVertexScope \u5404\u591a\u89d2\u5f62\u306e\u9802\u70b9\u306b\u5bfe\u3057\u30661\u3064\u306e\u5024\u304c\u3042\u308a\u3001\u591a\u89d2\u5f62\u5185\u3067\u7dda\u5f62\u306b\u88dc\u9593\u3055\u308c\u308b kFacevaryingScope kVaryingScope \u3068\u540c\u69d8\u306b\u591a\u89d2\u5f62\u306e\u9802\u70b9\u306b1\u3064\u306e\u5024\u304c\u3042\u308a\u3001\u591a\u89d2\u5f62\u5185\u3067\u7dda\u5f62\u306b\u88dc\u9593\u3055\u308c\u308b\u304c\u3001\u591a\u89d2\u5f62\u306e\u9802\u70b9\u306e\u5024\u306f\u591a\u89d2\u5f62\u6bce\u306b\u7570\u306a\u3063\u3066\u3082\u3088\u3044 \u6cd5\u7dda\u306e\u5024\u306e\u53d6\u5f97\u306f\u4ee5\u4e0b\u306e\u4f8b\u3092\u53c2\u7167\u3002 Xform \u5909\u5f62\u3092\u7ba1\u7406\u3059\u308b\u30b9\u30ad\u30fc\u30de\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002 \u5b50\u306b\u5909\u5f62\u3055\u305b\u308b PolyMesh \u3084\u81ea\u8eab\u3092\u6301\u3064\u3002 Xform \u304c\u89aa\u5b50\u3067\u3042\u308b\u5834\u5408\u3001\u89aa\u304c\u5909\u5f62\u3055\u305b\u305f\u5f8c\u306b\u5b50\u4f9b\u304c\u5909\u5f62\u3055\u305b\u308b(\u30c6\u30b9\u30c8\u3092\u898b\u308b\u9650\u308a\u3001\u3053\u306e\u5909\u5f62\u3057\u304b\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f)\u3002 \u5909\u5f62\u306e\u9806\u5e8f\u306f getInheritsXforms \u95a2\u6570\u3067\u5224\u5b9a\u3067\u304d\u308b\u3002 XformSchema Xform \u306e\u30b9\u30ad\u30fc\u30de\u3067\u3001 Xform \u30af\u30e9\u30b9\u306e getSchema \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002 XformSample XformSchema \u30af\u30e9\u30b9\u306e getValue \u30e1\u30f3\u30d0\u95a2\u6570\u3067 XformSample \u3092\u53d6\u5f97\u3067\u304d\u308b\u3002 XformSample \u306f XformOp \u306e\u30ea\u30b9\u30c8\u3092\u6301\u3064\u3002 getNumOps \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u7dcf\u6570\u3092\u53d6\u5f97\u3057\u3001 operator[] \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002 \u76f4\u306b\u5024\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u304c\u3001\u64cd\u4f5c\u304c\u8ffd\u52a0\u3055\u308c\u305f\u9806\u306b\u53d6\u308a\u51fa\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u305f\u3081\u3001\u7528\u5fc3\u3057\u3066\u4f7f\u3046\u4e8b\u3002 getNumOpChannels \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u81ea\u8eab\u304c\u6301\u3064 XformOp \u306e channel \u306e\u7dcf\u6570\u304c\u308f\u304b\u308b\u3002 XformOp XformOp \u306f\u5e73\u884c\u79fb\u52d5\u3001\u56de\u8ee2\u3001\u62e1\u5927\u7e2e\u5c0f\u3001\u7dda\u5f62\u5909\u63db\u3092\u8868\u3059\u3002 \u64cd\u4f5c\u306e\u7a2e\u985e\u306f getType \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u5224\u5b9a\u3067\u304d\u308b\u3002 \u5217\u6319\u5024\u3068\u610f\u5473\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002 XformOperationType \u610f\u5473 kScaleOperation \u62e1\u5927\u7e2e\u5c0f kTranslateOperation \u5e73\u884c\u79fb\u52d5 kRotateOperation \u56de\u8ee2 kMatrixOperation \u884c\u5217 kRotateXOperation x\u8ef8\u56de\u8ee2 kRotateYOperation y\u8ef8\u56de\u8ee2 kRotateZOperation z\u8ef8\u56de\u8ee2 XformOp \u306f channel \u3068\u3044\u3046 double \u306e\u30ea\u30b9\u30c8\u3092\u6301\u3061\u3001\u5404\u64cd\u4f5c\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u308b\u3002 \u5404\u64cd\u4f5c\u306e channel \u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002 \u64cd\u4f5c channel \u6570 \u5e73\u884c\u79fb\u52d5\u3068\u62e1\u5927\u7e2e\u5c0f 3 \u56de\u8ee2 4 \u884c\u5217 16 \u8ef8\u56de\u8ee2 1 \u884c\u5217\u306f\u884c\u512a\u5148\u3067\u683c\u7d0d\u3055\u308c\u308b\u3002 \u4f7f\u7528\u4f8b \u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u306e\u66f8\u304d\u8fbc\u307f \u5404\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u306f\u3001\u305d\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u516c\u958b\u3057\u3066\u3044\u308b\u5168\u3066\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f All.h \u3068\u3044\u3046\u540d\u524d\u306e\u30d8\u30c3\u30c0\u30fc\u304c\u3042\u308b\u3002 \u306a\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308c\u3070\u3088\u3044\u3002 // Alembic Includes #include <Alembic/AbcGeom/All.h> #include <Alembic/AbcCoreOgawa/All.h> \u6b21\u306b Archive \u3092\u4f5c\u308a\u3001\u305d\u306e Archive \u306e\u5b50\u4f9b\u3068\u3057\u3066\u3001\u9759\u7684\u306a\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u3092\u6301\u3064\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u3088\u3046\u3002 // \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u4f5c\u6210 auto abc_metadata = Alembic::Abc::MetaData(); // \u540d\u524d\u3092\"PolyMesh\"\u306b\u3059\u308b\u3002 abc_metadata.set(Alembic::Abc::kUserDescriptionKey, \"PolyMesh\"); auto archive_writer = Alembic::AbcCoreOgawa::WriteArchive(); auto writer_ptr = archive_writer(\"polyMesh1.abc\", abc_metadata); // polyMesh1.abc\u3078\u66f8\u304d\u8fbc\u3081\u308barchive\u3092\u4f5c\u6210 auto archive = Alembic::Abc::OArchive(writer_ptr); \u7acb\u65b9\u4f53[-1, 1] x [-1, 1] x [-1, 1]\u306ePolyMesh Object\u3092\u4f5c\u6210\u3059\u308b\u3002\"meshy\"\u306f meshyObj \u306e\u540d\u524d\u3002 auto abc_top = archive.getTop(); auto meshyObj = OPolyMesh(abc_top, \"meshy\"); UV\u3068\u6cd5\u7dda\u306eSample\u3092\u4f5c\u6210\u3059\u308b\u3002 \u305d\u306e\u524d\u306b\u3001UV\u306e\u540d\u524d\u306fSample\u306b\u5165\u308c\u308b\u524d\u306b\u4ed8\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002 auto& mesh = meshyObj.getSchema(); mesh.setUVSourceName(\"test\"); UV\u3068\u6cd5\u7dda\u306f GeomParams \u3092\u4f7f\u3046\u3002 GeomParams \u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u3042\u3063\u3066\u3082\u306a\u304f\u3066\u3082\u8aad\u307f\u66f8\u304d\u3067\u304d\u308b\u3002 kFacevaryingScope \u306b\u3064\u3044\u3066\u306f\u3001 \u53c2\u8003\u6587\u732e \u306e3\u30014\u3092\u53c2\u8003\u3002 // \u7acb\u65b9\u4f53\u306e\u9802\u70b9\u306eUV\u3002 // UV\u306e\u5024\u306f\u6307\u5b9a\u3057\u305f\u9762\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u306e\u9806\u306b\u3001\u5404\u9762\u306e\u5404\u9802\u70b9\u306e\u5024\u3092\u5217\u6319\u3059\u308b\u3002 extern const size_t g_numUVs; extern const Abc::float32_t g_uvs[]; auto uvsamp = OV2fGeomParam::Sample( V2fArraySample((const V2f *)g_uvs, g_numUVs), // reinterpret_cast\u3092\u4f7f\u3046\u3079\u304d kFacevaryingScope ); // \u7acb\u65b9\u4f53\u306e\u9802\u70b9\u306e\u6cd5\u7dda // \u6cd5\u7dda\u306e\u5024\u306f\u6307\u5b9a\u3057\u305f\u9762\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u306e\u9806\u306b\u3001\u5404\u9762\u306e\u5404\u9802\u70b9\u306e\u5024\u3092\u5217\u6319\u3059\u308b\u3002 // \u3053\u308c\u306f\u57fa\u672c\u7684\u306b\u306fRenderMan\u306e\"facevarying\"\u306e\u578b\u306b\u5408\u3046\u30b9\u30c8\u30ec\u30fc\u30b8\u3067\u3042\u308b\u3002 extern const size_t g_numNormals; extern const Abc::float32_t g_normals[]; auto nsamp = ON3fGeomParam::Sample( N3fArraySample((const N3f *)g_normals, g_numNormals), kFacevaryingScope ); \u30e1\u30c3\u30b7\u30e5\u306eSample\u3092\u8a2d\u5b9a\u3059\u308b\u3002 \u5f15\u6570\u306f\u5148\u982d\u304b\u3089\u9806\u306b\u3001\u9802\u70b9\u306e\u5ea7\u6a19\u3068\u9802\u70b9\u306e\u6570\u3001\u9762\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u30ea\u30b9\u30c8\u3068\u305d\u306e\u30ea\u30b9\u30c8\u306e\u30b5\u30a4\u30ba\u3001\u9762\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u306e\u6570\u306e\u30ea\u30b9\u30c8\u3068\u305d\u306e\u30ea\u30b9\u30c8\u306e\u30b5\u30a4\u30ba\u3067\u3042\u308b\u3002 \u901f\u5ea6\u306f OPolyMeshSchema::Sample \u306e setVelocityies \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u8a2d\u5b9a\u3059\u308b\u3002 auto mesh_samp = OPolyMeshSchema::Sample( V3fArraySample((const V3f *)g_verts, g_numVerts), Int32ArraySample(g_indices, g_numIndices), Int32ArraySample(g_counts, g_numCounts), uvsamp, nsamp ); mesh.set(mesh_samp); Alembic\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30b9\u30b3\u30fc\u30d7\u304b\u3089\u51fa\u308b\u3068\u304d\u306b\u81ea\u52d5\u7684\u306b\u7834\u68c4\u3055\u308c\u308b\u3002 \u306a\u306e\u3067\u3001\u7279\u306b\u4f55\u3082\u3057\u306a\u304f\u3066\u826f\u3044\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53\u306f\u53c2\u8003\u6587\u732e\u306e2\u306b\u3042\u308b\u3002 \u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u306e\u8aad\u307f\u8fbc\u307f \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u30d8\u30c3\u30c0\u30fc\u3068\u540d\u524d\u7a7a\u9593\u306f\u524d\u4f8b\u3092\u53c2\u7167\u3002 \u8aad\u307f\u8fbc\u307f\u7528\u30a2\u30fc\u30ab\u30a4\u30d6\u3092\u4f5c\u6210\u3059\u308b\u3002 auto archive_reader = Alembic::AbcCoreOgawa::ReadArchive(); auto reader_ptr = archive_reader(\"polyMesh1.abc\"); auto archive = Alembic::Abc::IArchive(reader_ptr); UV, \u6cd5\u7dda\u3092\u53d6\u5f97\u3059\u308b\u3002 auto meshyObj = IPolyMesh(archive.getTop(), \"meshy\"); IPolyMeshSchema& mesh = meshyObj.getSchema(); auto N = mesh.getNormalsParam(); auto uv = mesh.getUVsParam(); \u9802\u70b9\u306e\u5ea7\u6a19\u306e\u30ea\u30b9\u30c8\u3001\u9762\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u30ea\u30b9\u30c8\u3001\u9762\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u306e\u6570\u306e\u30ea\u30b9\u30c8\u3001AABB\u3001\u3082\u3057\u3042\u308c\u3070\u901f\u5ea6\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002 IPolyMeshSchema::Sample mesh_samp; mesh.get(mesh_samp); \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u3001\u6cd5\u7dda\u306e\u30ea\u30b9\u30c8\u306e\u30dd\u30a4\u30f3\u30bf\u30fc(\u6b63\u78ba\u306b\u306f N3fArraySamplePtr )\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002 auto nsp = N.getExpandedValue().getVals(); \u5404\u6cd5\u7dda\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u53d6\u5f97\u3067\u304d\u308b\u3002 for ( size_t i = 0 ; i < nsp->size() ; ++i ) { std::cout << i << \"th normal: \" << (*nsp)[i] << std::endl; } \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u305f\u3044\u3068\u304d\u306f\u3001 getExpandedValue \u306e\u4ee3\u308f\u308a\u306b getIndexedValue \u3092\u4f7f\u3046\u3002 auto uvsamp = uv.getIndexedValue(); \u5024\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u53d6\u5f97\u3059\u308b\u3002 V2f uv2 = (*(uvsamp.getVals()))[2]; TESTING_ASSERT( uv2 == V2f( 1.0f, 1.0f ) ); \u9802\u70b9\u306e\u30ea\u30b9\u30c8\u306e\u30b5\u30a4\u30ba\u306f\u4ee5\u4e0b\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002 mesh_samp.getPositions()->size(); \u6700\u521d\u306e\u9802\u70b9\u306e\u5ea7\u6a19\u306f\u4ee5\u4e0b\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002 (*(mesh_samp.getPositions()))[0]; \u53d6\u5f97\u3059\u308b\u3060\u3051\u306a\u3089\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7c21\u6f54\u306b\u66f8\u3051\u308b\u3002 mesh_samp.getPositions()->get()[0]; \u53c2\u8003\u6587\u732e Introduction \u2014 Alembic 1.7.0 documentation alembic/lib/Alembic/AbcGeom/Tests/PolyMeshTest.cpp alembic/lib/Alembic/AbcGeom/Foundation.h alembic/lib/Alembic/AbcGeom/GeometryScope.h Geometric Primitives Alembic/AbcGeom/GeometryScope.h","title":"Alembic\u306e\u4f7f\u3044\u65b9"},{"location":"blog/how-to-use-alembic/#alembic","text":"\u3053\u306e\u8a18\u4e8b\u306fAlembic\u306ev1.8.3\u3092\u53c2\u7167\u3057\u3066\u3044\u307e\u3059\u3002 \u610f\u5473\u304c\u308f\u304b\u3089\u306a\u304f\u3066\u3082\u6700\u5f8c\u307e\u3067\u76ee\u3092\u901a\u3057\u3066\u304b\u3089\u3001\u3082\u3046\u4e00\u5ea6\u8aad\u3080\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002 \u79c1\u304c\u7406\u89e3\u3057\u3066\u3044\u308b PolyMesh (\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5)\u3068 Xform (\u30e1\u30c3\u30b7\u30e5\u306e\u5909\u5f62)\u306b\u95a2\u9023\u3059\u308b\u9805\u76ee\u306e\u307f\u53d6\u308a\u4e0a\u3052\u307e\u3059\u3002 \u307e\u305f\u3001 alembic for realtime rendering \u3084Alembic\u521d\u671f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 alembic - AlembicPoint9UsersGuide.wiki \u3092\u8aad\u3080\u3068\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002","title":"Alembic\u306e\u4f7f\u3044\u65b9"},{"location":"blog/how-to-use-alembic/#alembic_1","text":"Alembic\u306f\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3084\u7269\u7406\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306a\u3069\u3092\u884c\u30463DCG\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u9593\u3067\u3084\u308a\u3068\u308a\u51fa\u6765\u308b\u3001 \u6642\u9593\u3054\u3068\u306e\u7269\u4f53\u306e\u5e7e\u4f55\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u305f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3067\u3042\u308b\u3002","title":"Alembic\u3068\u306f"},{"location":"blog/how-to-use-alembic/#_1","text":"Alembic\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u6bce\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u540d\u524d\u7a7a\u9593\u304c\u5206\u3051\u3089\u308c\u3066\u3044\u308b\u3002 \u4ee5\u4e0b\u306e\u8868\u306b\u5fc5\u8981\u306a\u3082\u306e\u3060\u3051\u3092\u629c\u7c8b\u3057\u305f\u3002 \u540d\u524d\u7a7a\u9593 \u5185\u5bb9 Abc Alembic\u306e\u57fa\u672c\u7684\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u63d0\u4f9b\u3059\u308b AbcCoreAbstract \u6642\u9593\u306b\u95a2\u3059\u308b\u30af\u30e9\u30b9\u4ee5\u5916\u30e6\u30fc\u30b6\u30fc\u304c\u898b\u308b\u5fc5\u8981\u306f\u306a\u3044 AbcCoreHDF5 HDF5\u3092\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u306b\u4f7f\u3063\u305f\u5834\u5408\u306e\u5165\u51fa\u529b\u306e\u5b9f\u88c5 AbcCoreLayer Alembic\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u5909\u66f4\u3092\u5225\u306eAlembic\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3093\u3060\u308a\u3001\u8907\u6570\u306eAlembic\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4e00\u3064\u306eAlembic\u30d5\u30a1\u30a4\u30eb\u306b\u307e\u3068\u3081\u308b\u6a5f\u80fd\u306e\u5b9f\u88c5 AbcCoreOgawa Ogawa\u3092\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u306b\u4f7f\u3063\u305f\u5834\u5408\u306e\u5165\u51fa\u529b\u306e\u5b9f\u88c5 AbcGeom Abc\u3092\u4f7f\u3063\u3066\u3001\u7269\u4f53\u306e\u5e7e\u4f55\u60c5\u5831\u3084\u525b\u4f53\u5909\u5f62\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b","title":"\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u69cb\u6210"},{"location":"blog/how-to-use-alembic/#_2","text":"Ogawa\u306fHDF5\u3088\u308a\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3060\u3068\u5e73\u5747\u30675\u500d\u3001\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3060\u3068\u540c\u3058\u64cd\u4f5c\u3092\u884c\u3063\u305f\u5834\u5408\u3068\u6bd4\u8f03\u3057\u306625\u500d\u901f\u304f\u8aad\u307f\u8fbc\u3080\u3002 \u307e\u305f\u3001\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u304c\u5e73\u5747\u30675-15%\u5c0f\u3055\u304f\u306a\u308a\u3001\u5c0f\u3055\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u591a\u3044\u307b\u3069\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3082\u5c0f\u3055\u304f\u306a\u308b\u3002 \u7279\u306b\u7406\u7531\u304c\u306a\u3051\u308c\u3070\u3001Ogawa\u3092\u4f7f\u3046\u3053\u3068\u3092\u304a\u52e7\u3081\u3059\u308b\u3002","title":"\u30d5\u30a1\u30a4\u30eb\u306e\u5165\u51fa\u529b\u306b\u3064\u3044\u3066"},{"location":"blog/how-to-use-alembic/#abccorelayer","text":"\u4ee5\u4e0b\u306e\u8868\u306b\u5217\u6319\u3059\u308b\u3002 \u51fa\u6765\u308b\u3053\u3068 \u4f8b \u5f62\u72b6\u306b\u8ffd\u52a0\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\u3067\u304d\u308b UV\u304c\u306a\u3044\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u306bUV\u3092\u8ffd\u52a0 \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u4e0a\u66f8\u304d \u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u4e0a\u306e\u9759\u7684\u306a\u70b9\u3092\u52d5\u304f\u70b9\u306b\u5909\u66f4 \u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8ffd\u52a0 \u65b0\u3057\u3044\u5f62\u72b6\u3092\u65e2\u5b58\u306e\u968e\u5c64\u306b\u8ffd\u52a0 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u524a\u9664 \u597d\u307f\u3058\u3083\u306a\u3044\u5f62\u72b6\u3084\u968e\u5c64\u306e\u30d6\u30e9\u30f3\u30c1\u5168\u4f53\u306e\u524a\u9664 \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u524a\u9664 \u4e0d\u6b63\u306a\u6cd5\u7dda\u306e\u524a\u9664 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u968e\u5c64\u306e\u7f6e\u304d\u63db\u3048 \u5206\u3051\u3089\u308c\u305f\u66f2\u7dda\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u4e00\u3064\u306e\u5927\u304d\u306a\u66f2\u7dda\u306b\u7f6e\u304d\u63db\u3048\u308b \u30d7\u30ed\u30d1\u30c6\u30a3\u968e\u5c64\u306e\u7f6e\u304d\u63db\u3048 \u30e6\u30fc\u30b6\u30fc\u30d7\u30ed\u30d1\u30c6\u30a3\u5185\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4ed6\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u7f6e\u304d\u63db\u3048\u308b \u307e\u305f\u3001Alembic\u30d5\u30a1\u30a4\u30eb\u306f\u8ffd\u8a18\u304c\u51fa\u6765\u306a\u3044\u305f\u3081\u3001 Points \u306a\u3069\u6642\u7cfb\u5217\u3067\u4fdd\u5b58\u3067\u304d\u306a\u3044\u5834\u5408\u306f\u6642\u7cfb\u5217\u9806\u306b\u30d5\u30a1\u30a4\u30eb\u306b\u540d\u524d\u3092\u4ed8\u3051\u3066\u3001\u3053\u306e\u6a5f\u80fd\u3067\u8aad\u307f\u8fbc\u3080\u3068\u826f\u3044\u3002 AbcCoreLayer\u306f MetaData \u3092\u9069\u5207\u306b\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306b\u3001 Util.h \u5185\u306b SetPrune \u3068 SetReplace \u3068\u3044\u3046\u4fbf\u5229\u306a\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3089\u3057\u3044\u3002","title":"AbcCoreLayer\u3067\u51fa\u6765\u308b\u3053\u3068"},{"location":"blog/how-to-use-alembic/#_3","text":"Alembic\u3067\u306f\u3001\u5165\u529b\u6642\u306b\u4f7f\u3046\u30af\u30e9\u30b9\u306b\u306f I \u304c\u3001\u51fa\u529b\u6642\u306b\u4f7f\u3046\u3082\u306e\u306b\u306f O \u304c\u540d\u524d\u306e\u5148\u982d\u306b\u4ed8\u304f\u3002 \u3053\u3053\u3067\u306f\u533a\u5225\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u305f\u3081\u3001\u7701\u7565\u3059\u308b\u3002","title":"\u4e3b\u306a\u6982\u5ff5"},{"location":"blog/how-to-use-alembic/#archive","text":"\u30c7\u30a3\u30b9\u30af\u4e0a\u306e\u5b9f\u969b\u306e\u30d5\u30a1\u30a4\u30eb\u3002 \u3059\u3079\u3066\u306e\u30b7\u30fc\u30f3\u30c7\u30fc\u30bf\u3092\u6301\u3064\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u30b3\u30f3\u30c6\u30ca\u3002 1\u3064\u306e Object \u3092\u6301\u3064\u3002","title":"Archive"},{"location":"blog/how-to-use-alembic/#object","text":"Alembic\u306e\u968e\u5c64\u306e\u4e3b\u306a\u5358\u4f4d\u3002 Object \u306f Archive \u306e Object \u3092\u30eb\u30fc\u30c8\u3068\u3057\u305f\u591a\u5206\u6728\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u89aa\u3068\u5b50\u4f9b\u305f\u3061\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3002 1\u3064\u306e CompoundProperty \u3092\u6301\u3064\u3002 ObjectHeader \u3068\u547c\u3070\u308c\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u6301\u3061\u3001 SchemaObject \u3092\u5224\u5b9a\u3059\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u308b\u3002","title":"Object"},{"location":"blog/how-to-use-alembic/#schema","text":"\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u3088\u3046\u306a\u3001\u3042\u308b\u8907\u96d1\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u4f5c\u3089\u308c\u305f CompoundProperty \u3002","title":"Schema"},{"location":"blog/how-to-use-alembic/#schemaobject","text":"Schema \u3092 CompundProperty \u3068\u3057\u3066\u6301\u3064 Object \u306e\u3053\u3068\u3002","title":"SchemaObject"},{"location":"blog/how-to-use-alembic/#property","text":"Simple\u3068Compound\u306e2\u7a2e\u985e\u306e\u578b\u304c\u3042\u308b\u3002 \u5024\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f SampleSelector \u3068\u3044\u3046\u3001\u3042\u308b\u6642\u70b9\u306e\u6642\u523b\u3092\u8868\u3059\u30af\u30e9\u30b9\u3092\u4e0e\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002","title":"Property"},{"location":"blog/how-to-use-alembic/#simple-property","text":"Scalar\u3068Array\u306e2\u7a2e\u985e\u3042\u308b\u3002","title":"Simple Property"},{"location":"blog/how-to-use-alembic/#scalarproperty","text":"\u578b\u3068\u8981\u7d20\u306e\u6570\u304c\u56fa\u5b9a\u3055\u308c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u307e\u308b\u8907\u6570\u306eSample\u3092\u6301\u3064\u3002 \u4f8b\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u304c\u3042\u308b\u3002 FloatProperty (\u5404Sample\u306f32\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570; \u9577\u3055 1) StringProperty (\u5404Sample\u306f\u4efb\u610f\u306e\u9577\u3055\u3092\u6301\u3064\u30011\u3064\u306estring; \u9577\u3055 1) M44dProperty (\u5404Sample\u306f16\u500b\u306e64\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570; \u9577\u3055 16) \u4ee5\u4e0b\u306e3\u3064\u306eSample\u3092\u6301\u3064Property \u525b\u4f53\u306e\u8cea\u91cf(1\u3064\u306e\u6570\u5024; \u9577\u3055 1) \u8272(\u5024\u304c\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306eRGB\u306e\u30d9\u30af\u30c8\u30eb;\u9577\u3055 3) \u30d0\u30a6\u30f3\u30c7\u30a3\u30f3\u30b0\u30dc\u30c3\u30af\u30b9(\u5024\u304c\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e2\u3064\u306e3\u6b21\u5143\u30d9\u30af\u30c8\u30eb; \u9577\u3055 6) ScalarProperty\u306e\u6700\u5927\u306e\u9577\u3055\u306f256\u3067\u3042\u308b\u3002","title":"ScalarProperty"},{"location":"blog/how-to-use-alembic/#typedarrayproperty","text":"\u6642\u523b\u6bce\u306e Sample \u3092\u6301\u3064 Property \u3002 ArrayProperty \u3082\u3042\u308b\u304c\u3001\u4e3b\u306b\u4f7f\u3046\u306e\u306f\u3053\u3063\u3061\u306e\u65b9\u3002 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5024\u306e\u578b(\u6b63\u78ba\u306b\u306f TypedPropertyTraits.h \u3067\u5b9a\u7fa9\u3055\u308c\u305f\u578b)\u304c\u5165\u3063\u3066\u3044\u308b\u3002 \u4f8b\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u304c\u3042\u308b\u3002 DoubleArrayProperty (\u5404\u6642\u523b\u3067\u3001\u8981\u7d20\u304c1\u3064\u306e64\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u914d\u5217\u3092\u6301\u3064) V3fArrayProperty (\u5404\u6642\u523b\u3067\u3001\u8981\u7d20\u304c1\u3064\u306e Imath::Vec3f (3\u3064\u306e32\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570)\u306e\u914d\u5217\u3092\u6301\u3064) M44fArrayProperty (\u5404\u6642\u523b\u3067\u3001\u8981\u7d20\u304c1\u3064\u306e Imath::M44f (16\u500b\u306e32\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570)\u306e\u914d\u5217\u3092\u6301\u3064) \u591a\u89d2\u5f62\u30e1\u30c3\u30b7\u30e5\u306e\u9802\u70b9\u306e\u30ea\u30b9\u30c8 \u6d41\u4f53\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7c92\u5b50\u306e\u30ea\u30b9\u30c8 \u305f\u3060\u3057\u3001\u540c\u3058Sample\u3092\u4fdd\u5b58\u3057\u306a\u3044\u3002","title":"TypedArrayProperty"},{"location":"blog/how-to-use-alembic/#compoundproperty","text":"( CompoundProperty \u3092\u542b\u3080)\u8907\u6570\u306eProperty\u3092\u6301\u3064Property\u3002","title":"CompoundProperty"},{"location":"blog/how-to-use-alembic/#sample","text":"\u3042\u308b\u6642\u523b\u306e\u751f\u306e\u30c7\u30fc\u30bf\u3002 Property\u3068\u540c\u69d8\u306b\u3001Sample\u3082Scalar\u3068Array\u306e2\u7a2e\u985e\u3042\u308b\u3002 \u4f8b\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u304c\u3042\u308b\u3002 DoubleArraySample (\u8981\u7d20\u304c1\u3064\u306e64\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u914d\u5217) V3fArraySample (\u8981\u7d20\u304c1\u3064\u306e Imath::Vec3f (3\u3064\u306e32\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570)\u306e\u914d\u5217) M44fArraySample (\u8981\u7d20\u304c1\u3064\u306e Imath::M44f (16\u500b\u306e32\u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570)\u306e\u914d\u5217)","title":"Sample"},{"location":"blog/how-to-use-alembic/#timesampling","text":"Property\u304c\u6301\u3064\u6642\u9593\u3092\u7ba1\u7406\u3059\u308b\u30af\u30e9\u30b9\u3002 \u6642\u9593\u306e\u914d\u5217\u3068 TimeSamplingType \u3092\u6301\u3064\u3002 TimeSamplingType \u306e\u7a2e\u985e\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002 TimeSamplingType \u610f\u5473 Uniform (\u4e00\u69d8) Sample\u9593\u306e\u6642\u9593\u9593\u9694\u304c\u4e00\u5b9a Cyclic (\u5468\u671f\u7684) Sample\u9593\u306e\u6642\u9593\u9593\u9694\u304c\u5468\u671f\u7684\u306b\u5909\u5316\u3059\u308b Acyclic (\u4e0d\u898f\u5247) Sample\u9593\u306e\u6642\u9593\u9593\u9694\u304c\u4e0d\u898f\u5247\u306b\u5909\u5316\u3059\u308b","title":"TimeSampling"},{"location":"blog/how-to-use-alembic/#sampleselector","text":"Property\u5185\u306eSample\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30af\u30e9\u30b9\u3002 TimeSampling \u304c\u6301\u3064\u6642\u9593\u306e\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u76f4\u63a5\u4e0e\u3048\u308b\u304b\u3001\u6642\u523b\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u4f5c\u308b\u3002 \u6642\u523b\u3092\u6e21\u3059\u5834\u5408\u3001\u8ffd\u52a0\u3067 TimeIndexType \u30d5\u30e9\u30b0\u3092\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u308b\u3002 TimeIndexType \u30d5\u30e9\u30b0\u306e\u610f\u5473\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002 TimeIndexType \u610f\u5473 kNearIndex \u4e0e\u3048\u3089\u308c\u305f\u6642\u523b\u306b\u6700\u3082\u8fd1\u3044\u6642\u523b\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 kFloorIndex \u4e0e\u3048\u3089\u308c\u305f\u6642\u523b\u3088\u308a\u5927\u304d\u304f\u306a\u3044\u3001\u6700\u5927\u306e\u6642\u523b\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 kCeilIndex \u4e0e\u3048\u3089\u308c\u305f\u6642\u523b\u3088\u308a\u5c0f\u3055\u304f\u306a\u3044\u3001\u6700\u5c0f\u306e\u6642\u523b\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9","title":"SampleSelector"},{"location":"blog/how-to-use-alembic/#_4","text":"","title":"\u4e3b\u306a\u30b9\u30ad\u30fc\u30de\u30aa\u30d6\u30b8\u30a7\u30af\u30c8"},{"location":"blog/how-to-use-alembic/#polymesh","text":"\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u3092\u7ba1\u7406\u3059\u308b\u30b9\u30ad\u30fc\u30de\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002 \u6642\u523b\u6bce\u306b\u9802\u70b9\u3001\u9762\u3001\u9802\u70b9\u3084\u9762\u306e\u6cd5\u7dda\u3092\u6301\u3061\u3001UV\u3001\u9802\u70b9\u3054\u3068\u306e\u901f\u5ea6\u3001AABB\u3082\u6301\u3064\u3053\u3068\u304c\u51fa\u6765\u308b\u3002","title":"PolyMesh"},{"location":"blog/how-to-use-alembic/#polymeshschema","text":"PolyMesh \u306e\u30b9\u30ad\u30fc\u30de\u3067\u3001 PolyMesh \u30af\u30e9\u30b9\u306e getSchema \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002 \u3053\u306e\u30af\u30e9\u30b9\u306e getTopologyVariance \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u304c\u5909\u5316\u3059\u308b\u304b\u5224\u5b9a\u3067\u304d\u308b\u3002 \u4ee5\u4e0b\u306f\u623b\u308a\u5024\u3068\u305d\u306e\u610f\u5473\u306e\u8868\u3067\u3042\u308b\u3002 \u623b\u308a\u5024\u306f\u540d\u524d\u7a7a\u9593 Alembic::AbcGeom::MeshTopologyVariance \u3092\u7701\u7565\u3057\u3066\u3044\u308b\u3002 \u623b\u308a\u5024 \u610f\u5473 kConstantTopology \u5909\u5316\u3057\u306a\u3044 kHomogen(e)ousTopology \u9802\u70b9\u306e\u4f4d\u7f6e\u306f\u5909\u308f\u308b\u304c\u3001\u30c8\u30dd\u30ed\u30b8\u30fc\u306f\u5909\u5316\u3057\u306a\u3044 kHeterogen(e)ousTopology \u9802\u70b9\u306e\u4f4d\u7f6e\u3082\u30c8\u30dd\u30ed\u30b8\u30fc\u3082\u5909\u5316\u3059\u308b XformSchema \u3068\u540c\u3058\u3088\u3046\u306b\u3001 getValue \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u6642\u523b\u306e\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u3092\u53d6\u5f97\u3067\u304d\u308b\u304c\u3001\u3044\u304f\u3064\u304b\u6ce8\u610f\u70b9\u304c\u3042\u308b\u3002","title":"PolyMeshSchema"},{"location":"blog/how-to-use-alembic/#_5","text":"Alembic\u3067\u306f\u3001\u4efb\u610f\u306e\u591a\u89d2\u5f62\u3092\u6301\u3064\u3053\u3068\u304c\u51fa\u6765\u308b\u3002 \u3064\u307e\u308a\u3001\u4e09\u89d2\u5f62\u3084\u56db\u89d2\u5f62\u3092\u6301\u3064\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u3092Alembic\u306b\u4fdd\u5b58\u3067\u304d\u308b\u3002 \u3053\u306e\u3053\u3068\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u3001\u9762\u3092\u4ee5\u4e0b\u306e\u30ea\u30b9\u30c8\u3067\u8868\u73fe\u3057\u3066\u3044\u308b\u3002 \u305d\u308c\u305e\u308c\u306e\u9762\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6301\u3064 1\u6b21\u5143 \u306e\u30ea\u30b9\u30c8 \u305d\u308c\u305e\u308c\u306e\u9762\u306b\u542b\u307e\u308c\u308b\u9802\u70b9\u306e\u500b\u6570\u306e\u30ea\u30b9\u30c8 1\u3064\u76ee\u306e\u30ea\u30b9\u30c8\u306f\u9762\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u30ea\u30b9\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5bfe\u5fdc\u3055\u305b\u305f2\u6b21\u5143\u306e\u30ea\u30b9\u30c8\u3092\u30d5\u30e9\u30c3\u30c8\u306b\u3057\u305f\u3082\u306e\u3067\u3082\u3042\u308b\u3002 \u5177\u4f53\u4f8b\u3068\u3057\u3066\u3001\u4e09\u89d2\u5f62\u3068\u56db\u89d2\u5f62\u3092\u305d\u308c\u305e\u308c1\u3064\u305a\u3064\u6301\u3061\u30011\u8fba\u3092\u5171\u6709\u3059\u308b\u30e1\u30c3\u30b7\u30e5\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002 [0, 1, 2, 1, 3, 4, 2] [3, 4] 1\u3064\u76ee\u306e\u30ea\u30b9\u30c8\u3092\u6301\u3064Property\u306f getFaceIndicesProperty \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u53d6\u5f97\u3067\u304d\u30012\u3064\u76ee\u306e\u30ea\u30b9\u30c8\u3092\u6301\u3064Property\u306f getFaceIndicesProperty \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002","title":"\u9762"},{"location":"blog/how-to-use-alembic/#_6","text":"\u5b9f\u306f\u6cd5\u7dda\u3068UV\u306f\u3053\u308c\u307e\u3067\u8aac\u660e\u3057\u3066\u304d\u305f\u30af\u30e9\u30b9\u306e\u3069\u308c\u3067\u3082\u306a\u3044\u3002 \u6cd5\u7dda\u306f TypedGeomParam \u3068\u3044\u3046Schema\u306b\u4f3c\u305f\u3088\u3046\u306a\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3001 PolyMeshSchema \u30af\u30e9\u30b9\u306e getNormalsParam \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002 \u6cd5\u7dda\u306e\u5024\u306e\u610f\u5473\u306f TypedGeomParam \u30af\u30e9\u30b9\u306e getScope \u306e\u623b\u308a\u5024\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3002 \u623b\u308a\u5024 \u610f\u5473 kConstantScope \u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u5168\u4f53\u30671\u3064\u3060\u3051\u306e\u5024 kUniformScope \u5404\u591a\u89d2\u5f62\u306b\u5bfe\u3057\u30661\u3064\u306e\u5024 kVaryingScope, kVertexScope \u5404\u591a\u89d2\u5f62\u306e\u9802\u70b9\u306b\u5bfe\u3057\u30661\u3064\u306e\u5024\u304c\u3042\u308a\u3001\u591a\u89d2\u5f62\u5185\u3067\u7dda\u5f62\u306b\u88dc\u9593\u3055\u308c\u308b kFacevaryingScope kVaryingScope \u3068\u540c\u69d8\u306b\u591a\u89d2\u5f62\u306e\u9802\u70b9\u306b1\u3064\u306e\u5024\u304c\u3042\u308a\u3001\u591a\u89d2\u5f62\u5185\u3067\u7dda\u5f62\u306b\u88dc\u9593\u3055\u308c\u308b\u304c\u3001\u591a\u89d2\u5f62\u306e\u9802\u70b9\u306e\u5024\u306f\u591a\u89d2\u5f62\u6bce\u306b\u7570\u306a\u3063\u3066\u3082\u3088\u3044 \u6cd5\u7dda\u306e\u5024\u306e\u53d6\u5f97\u306f\u4ee5\u4e0b\u306e\u4f8b\u3092\u53c2\u7167\u3002","title":"\u6cd5\u7dda"},{"location":"blog/how-to-use-alembic/#xform","text":"\u5909\u5f62\u3092\u7ba1\u7406\u3059\u308b\u30b9\u30ad\u30fc\u30de\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002 \u5b50\u306b\u5909\u5f62\u3055\u305b\u308b PolyMesh \u3084\u81ea\u8eab\u3092\u6301\u3064\u3002 Xform \u304c\u89aa\u5b50\u3067\u3042\u308b\u5834\u5408\u3001\u89aa\u304c\u5909\u5f62\u3055\u305b\u305f\u5f8c\u306b\u5b50\u4f9b\u304c\u5909\u5f62\u3055\u305b\u308b(\u30c6\u30b9\u30c8\u3092\u898b\u308b\u9650\u308a\u3001\u3053\u306e\u5909\u5f62\u3057\u304b\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f)\u3002 \u5909\u5f62\u306e\u9806\u5e8f\u306f getInheritsXforms \u95a2\u6570\u3067\u5224\u5b9a\u3067\u304d\u308b\u3002","title":"Xform"},{"location":"blog/how-to-use-alembic/#xformschema","text":"Xform \u306e\u30b9\u30ad\u30fc\u30de\u3067\u3001 Xform \u30af\u30e9\u30b9\u306e getSchema \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002","title":"XformSchema"},{"location":"blog/how-to-use-alembic/#xformsample","text":"XformSchema \u30af\u30e9\u30b9\u306e getValue \u30e1\u30f3\u30d0\u95a2\u6570\u3067 XformSample \u3092\u53d6\u5f97\u3067\u304d\u308b\u3002 XformSample \u306f XformOp \u306e\u30ea\u30b9\u30c8\u3092\u6301\u3064\u3002 getNumOps \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u7dcf\u6570\u3092\u53d6\u5f97\u3057\u3001 operator[] \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002 \u76f4\u306b\u5024\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u304c\u3001\u64cd\u4f5c\u304c\u8ffd\u52a0\u3055\u308c\u305f\u9806\u306b\u53d6\u308a\u51fa\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u305f\u3081\u3001\u7528\u5fc3\u3057\u3066\u4f7f\u3046\u4e8b\u3002 getNumOpChannels \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u81ea\u8eab\u304c\u6301\u3064 XformOp \u306e channel \u306e\u7dcf\u6570\u304c\u308f\u304b\u308b\u3002","title":"XformSample"},{"location":"blog/how-to-use-alembic/#xformop","text":"XformOp \u306f\u5e73\u884c\u79fb\u52d5\u3001\u56de\u8ee2\u3001\u62e1\u5927\u7e2e\u5c0f\u3001\u7dda\u5f62\u5909\u63db\u3092\u8868\u3059\u3002 \u64cd\u4f5c\u306e\u7a2e\u985e\u306f getType \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u5224\u5b9a\u3067\u304d\u308b\u3002 \u5217\u6319\u5024\u3068\u610f\u5473\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002 XformOperationType \u610f\u5473 kScaleOperation \u62e1\u5927\u7e2e\u5c0f kTranslateOperation \u5e73\u884c\u79fb\u52d5 kRotateOperation \u56de\u8ee2 kMatrixOperation \u884c\u5217 kRotateXOperation x\u8ef8\u56de\u8ee2 kRotateYOperation y\u8ef8\u56de\u8ee2 kRotateZOperation z\u8ef8\u56de\u8ee2 XformOp \u306f channel \u3068\u3044\u3046 double \u306e\u30ea\u30b9\u30c8\u3092\u6301\u3061\u3001\u5404\u64cd\u4f5c\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u308b\u3002 \u5404\u64cd\u4f5c\u306e channel \u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002 \u64cd\u4f5c channel \u6570 \u5e73\u884c\u79fb\u52d5\u3068\u62e1\u5927\u7e2e\u5c0f 3 \u56de\u8ee2 4 \u884c\u5217 16 \u8ef8\u56de\u8ee2 1 \u884c\u5217\u306f\u884c\u512a\u5148\u3067\u683c\u7d0d\u3055\u308c\u308b\u3002","title":"XformOp"},{"location":"blog/how-to-use-alembic/#_7","text":"","title":"\u4f7f\u7528\u4f8b"},{"location":"blog/how-to-use-alembic/#_8","text":"\u5404\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u306f\u3001\u305d\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u516c\u958b\u3057\u3066\u3044\u308b\u5168\u3066\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f All.h \u3068\u3044\u3046\u540d\u524d\u306e\u30d8\u30c3\u30c0\u30fc\u304c\u3042\u308b\u3002 \u306a\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308c\u3070\u3088\u3044\u3002 // Alembic Includes #include <Alembic/AbcGeom/All.h> #include <Alembic/AbcCoreOgawa/All.h> \u6b21\u306b Archive \u3092\u4f5c\u308a\u3001\u305d\u306e Archive \u306e\u5b50\u4f9b\u3068\u3057\u3066\u3001\u9759\u7684\u306a\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u3092\u6301\u3064\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u3088\u3046\u3002 // \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u4f5c\u6210 auto abc_metadata = Alembic::Abc::MetaData(); // \u540d\u524d\u3092\"PolyMesh\"\u306b\u3059\u308b\u3002 abc_metadata.set(Alembic::Abc::kUserDescriptionKey, \"PolyMesh\"); auto archive_writer = Alembic::AbcCoreOgawa::WriteArchive(); auto writer_ptr = archive_writer(\"polyMesh1.abc\", abc_metadata); // polyMesh1.abc\u3078\u66f8\u304d\u8fbc\u3081\u308barchive\u3092\u4f5c\u6210 auto archive = Alembic::Abc::OArchive(writer_ptr); \u7acb\u65b9\u4f53[-1, 1] x [-1, 1] x [-1, 1]\u306ePolyMesh Object\u3092\u4f5c\u6210\u3059\u308b\u3002\"meshy\"\u306f meshyObj \u306e\u540d\u524d\u3002 auto abc_top = archive.getTop(); auto meshyObj = OPolyMesh(abc_top, \"meshy\"); UV\u3068\u6cd5\u7dda\u306eSample\u3092\u4f5c\u6210\u3059\u308b\u3002 \u305d\u306e\u524d\u306b\u3001UV\u306e\u540d\u524d\u306fSample\u306b\u5165\u308c\u308b\u524d\u306b\u4ed8\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002 auto& mesh = meshyObj.getSchema(); mesh.setUVSourceName(\"test\"); UV\u3068\u6cd5\u7dda\u306f GeomParams \u3092\u4f7f\u3046\u3002 GeomParams \u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u3042\u3063\u3066\u3082\u306a\u304f\u3066\u3082\u8aad\u307f\u66f8\u304d\u3067\u304d\u308b\u3002 kFacevaryingScope \u306b\u3064\u3044\u3066\u306f\u3001 \u53c2\u8003\u6587\u732e \u306e3\u30014\u3092\u53c2\u8003\u3002 // \u7acb\u65b9\u4f53\u306e\u9802\u70b9\u306eUV\u3002 // UV\u306e\u5024\u306f\u6307\u5b9a\u3057\u305f\u9762\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u306e\u9806\u306b\u3001\u5404\u9762\u306e\u5404\u9802\u70b9\u306e\u5024\u3092\u5217\u6319\u3059\u308b\u3002 extern const size_t g_numUVs; extern const Abc::float32_t g_uvs[]; auto uvsamp = OV2fGeomParam::Sample( V2fArraySample((const V2f *)g_uvs, g_numUVs), // reinterpret_cast\u3092\u4f7f\u3046\u3079\u304d kFacevaryingScope ); // \u7acb\u65b9\u4f53\u306e\u9802\u70b9\u306e\u6cd5\u7dda // \u6cd5\u7dda\u306e\u5024\u306f\u6307\u5b9a\u3057\u305f\u9762\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u306e\u9806\u306b\u3001\u5404\u9762\u306e\u5404\u9802\u70b9\u306e\u5024\u3092\u5217\u6319\u3059\u308b\u3002 // \u3053\u308c\u306f\u57fa\u672c\u7684\u306b\u306fRenderMan\u306e\"facevarying\"\u306e\u578b\u306b\u5408\u3046\u30b9\u30c8\u30ec\u30fc\u30b8\u3067\u3042\u308b\u3002 extern const size_t g_numNormals; extern const Abc::float32_t g_normals[]; auto nsamp = ON3fGeomParam::Sample( N3fArraySample((const N3f *)g_normals, g_numNormals), kFacevaryingScope ); \u30e1\u30c3\u30b7\u30e5\u306eSample\u3092\u8a2d\u5b9a\u3059\u308b\u3002 \u5f15\u6570\u306f\u5148\u982d\u304b\u3089\u9806\u306b\u3001\u9802\u70b9\u306e\u5ea7\u6a19\u3068\u9802\u70b9\u306e\u6570\u3001\u9762\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u30ea\u30b9\u30c8\u3068\u305d\u306e\u30ea\u30b9\u30c8\u306e\u30b5\u30a4\u30ba\u3001\u9762\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u306e\u6570\u306e\u30ea\u30b9\u30c8\u3068\u305d\u306e\u30ea\u30b9\u30c8\u306e\u30b5\u30a4\u30ba\u3067\u3042\u308b\u3002 \u901f\u5ea6\u306f OPolyMeshSchema::Sample \u306e setVelocityies \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u8a2d\u5b9a\u3059\u308b\u3002 auto mesh_samp = OPolyMeshSchema::Sample( V3fArraySample((const V3f *)g_verts, g_numVerts), Int32ArraySample(g_indices, g_numIndices), Int32ArraySample(g_counts, g_numCounts), uvsamp, nsamp ); mesh.set(mesh_samp); Alembic\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30b9\u30b3\u30fc\u30d7\u304b\u3089\u51fa\u308b\u3068\u304d\u306b\u81ea\u52d5\u7684\u306b\u7834\u68c4\u3055\u308c\u308b\u3002 \u306a\u306e\u3067\u3001\u7279\u306b\u4f55\u3082\u3057\u306a\u304f\u3066\u826f\u3044\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53\u306f\u53c2\u8003\u6587\u732e\u306e2\u306b\u3042\u308b\u3002","title":"\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u306e\u66f8\u304d\u8fbc\u307f"},{"location":"blog/how-to-use-alembic/#_9","text":"\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u30d8\u30c3\u30c0\u30fc\u3068\u540d\u524d\u7a7a\u9593\u306f\u524d\u4f8b\u3092\u53c2\u7167\u3002 \u8aad\u307f\u8fbc\u307f\u7528\u30a2\u30fc\u30ab\u30a4\u30d6\u3092\u4f5c\u6210\u3059\u308b\u3002 auto archive_reader = Alembic::AbcCoreOgawa::ReadArchive(); auto reader_ptr = archive_reader(\"polyMesh1.abc\"); auto archive = Alembic::Abc::IArchive(reader_ptr); UV, \u6cd5\u7dda\u3092\u53d6\u5f97\u3059\u308b\u3002 auto meshyObj = IPolyMesh(archive.getTop(), \"meshy\"); IPolyMeshSchema& mesh = meshyObj.getSchema(); auto N = mesh.getNormalsParam(); auto uv = mesh.getUVsParam(); \u9802\u70b9\u306e\u5ea7\u6a19\u306e\u30ea\u30b9\u30c8\u3001\u9762\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u30ea\u30b9\u30c8\u3001\u9762\u3092\u69cb\u6210\u3059\u308b\u9802\u70b9\u306e\u6570\u306e\u30ea\u30b9\u30c8\u3001AABB\u3001\u3082\u3057\u3042\u308c\u3070\u901f\u5ea6\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002 IPolyMeshSchema::Sample mesh_samp; mesh.get(mesh_samp); \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u3001\u6cd5\u7dda\u306e\u30ea\u30b9\u30c8\u306e\u30dd\u30a4\u30f3\u30bf\u30fc(\u6b63\u78ba\u306b\u306f N3fArraySamplePtr )\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002 auto nsp = N.getExpandedValue().getVals(); \u5404\u6cd5\u7dda\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u53d6\u5f97\u3067\u304d\u308b\u3002 for ( size_t i = 0 ; i < nsp->size() ; ++i ) { std::cout << i << \"th normal: \" << (*nsp)[i] << std::endl; } \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u305f\u3044\u3068\u304d\u306f\u3001 getExpandedValue \u306e\u4ee3\u308f\u308a\u306b getIndexedValue \u3092\u4f7f\u3046\u3002 auto uvsamp = uv.getIndexedValue(); \u5024\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u53d6\u5f97\u3059\u308b\u3002 V2f uv2 = (*(uvsamp.getVals()))[2]; TESTING_ASSERT( uv2 == V2f( 1.0f, 1.0f ) ); \u9802\u70b9\u306e\u30ea\u30b9\u30c8\u306e\u30b5\u30a4\u30ba\u306f\u4ee5\u4e0b\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002 mesh_samp.getPositions()->size(); \u6700\u521d\u306e\u9802\u70b9\u306e\u5ea7\u6a19\u306f\u4ee5\u4e0b\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002 (*(mesh_samp.getPositions()))[0]; \u53d6\u5f97\u3059\u308b\u3060\u3051\u306a\u3089\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7c21\u6f54\u306b\u66f8\u3051\u308b\u3002 mesh_samp.getPositions()->get()[0];","title":"\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u306e\u8aad\u307f\u8fbc\u307f"},{"location":"blog/how-to-use-alembic/#_10","text":"Introduction \u2014 Alembic 1.7.0 documentation alembic/lib/Alembic/AbcGeom/Tests/PolyMeshTest.cpp alembic/lib/Alembic/AbcGeom/Foundation.h alembic/lib/Alembic/AbcGeom/GeometryScope.h Geometric Primitives Alembic/AbcGeom/GeometryScope.h","title":"\u53c2\u8003\u6587\u732e"},{"location":"blog/memo/","text":"\u30e1\u30e2 \u5c0f\u30cd\u30bf\u96c6\u3067\u3059\u3002 Blender\u3067Alembic\u3092\u51fa\u529b\u3057\u305f\u5834\u5408 \u901f\u5ea6\u306f\u51fa\u529b\u3055\u308c\u306a\u3044 \u525b\u4f53\u904b\u52d5\u306fXformSample\u306b\u8a18\u9332\u3055\u308c\u308b \u30bd\u30d5\u30c8\u30dc\u30c7\u30a3\u306e\u904b\u52d5\u306fXformSample\u306b\u8a18\u9332\u3055\u308c\u306a\u3044 \u30bd\u30d5\u30c8\u30dc\u30c7\u30a3\u3068\u525b\u4f53\u304c\u3042\u308b\u6642\u3001\u4f8b\u3048\u525b\u4f53\u3067\u3042\u3063\u3066\u3082\u5404\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306e\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u306e\u60c5\u5831(\u70b9\u3001\u6cd5\u7dda\u3001\u9762)\u304c\u51fa\u529b\u3055\u308c\u308b\u3002 Thrust oneTBB\u3092\u30c7\u30d0\u30a4\u30b9\u3068\u3057\u3066\u4f7f\u3046\u5834\u5408\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 -expt-extended-lambda \u3092nvcc\u306b\u6e21\u3057\u3066\u3082\u30e9\u30e0\u30c0\u5f0f\u3092\u30c7\u30d0\u30a4\u30b9\u30b3\u30fc\u30c9\u3067\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002 \u5165\u308c\u5b50\u306b\u306a\u3063\u305f host_vector \u3068 device_vector \u306f\u304a\u4e92\u3044\u306b\u30b3\u30d4\u30fc\u3067\u304d\u306a\u3044(\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b)\u3002 C++ C++\u6a19\u6e96async+future\u3068\u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb\u306e\u6027\u80fd\u6bd4\u8f03 \u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u3068default\u5ba3\u8a00\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30de\u30af\u30ed\u3067\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002 struct A final {} \u306f\u5408\u6cd5\u3002 \u30e9\u30e0\u30c0\u95a2\u6570\u306f\u9759\u7684\u306a\u5909\u6570\u3092\u81ea\u52d5\u7684\u306b\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u3002 \u4ee5\u4e0b\u306e\u3088\u3046\u306a\u518d\u5e30\u7684\u306a\u69cb\u9020\u4f53\u306f\u5408\u6cd5\u3002 template <int D> struct A { static_assert(D > 1); double d; A<D-1> a; }; template <> struct A<1> { int d; }; \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30af\u30e9\u30b9\u306e\u9759\u7684\u306a\u30e1\u30f3\u30d0\u5b9a\u6570\u306f inline \u306b\u3059\u308b\u3068\u660e\u793a\u7684\u306b\u5b9f\u4f53\u3092\u5b9a\u7fa9\u305b\u305a\u306b\u6e08\u3080\u3002 \u30e1\u30f3\u30d0\u5909\u6570\u306b const \u3092\u4ed8\u3051\u308b\u3068 default \u5ba3\u8a00\u3055\u308c\u305f\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u524a\u9664\u3055\u308c\u308b\u3002 Boost Boost.Test\u3092CMake\u306e find_package \u3067\u898b\u3064\u3051\u305f\u3044\u6642\u306f\u3001 components \u306b unit_test_framework \u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002 Git git push --force-with-lease git rm \u3067\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u6d88\u305b\u308b\u3002 fast-forward\u3067\u306e\u30de\u30fc\u30b8\u3092\u53d6\u308a\u6d88\u3057\u305f\u3044\u6642\u306f\u3001 git reflog --keep (\u30d6\u30e9\u30f3\u30c1\u540d)@{\u756a\u53f7} \u3068\u3059\u308c\u3070\u826f\u3044\u3002 \u6700\u65b0\u306e\u30b3\u30df\u30c3\u30c8\u3057\u304b\u8981\u3089\u306a\u3044\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3057\u305f\u3044\u6642\u3001 --depth 1 \u3092\u3064\u3051\u308c\u3070\u826f\u3044\u3002 \u8ffd\u8de1\u3057\u3066\u3044\u306a\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u6d88\u3057\u305f\u3044\u6642\u306f git clean \u3002 \u8ffd\u8de1\u3057\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u5168\u3066\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3057\u305f\u3044\u6642\u306f git add -u \u3002 PETc PETSc\u306eC++\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u306b\u306f PETSc\u306b\u306f PetscCallThrow \u3068\u3044\u3046\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u3068 std::runtime_error \u3092\u6295\u3052\u308b\u95a2\u6570\u304c\u3042\u308b\u3002 \u3053\u306e\u95a2\u6570\u306f PETSC_CLANGUAGE_CXX \u3068\u3044\u3046\u30de\u30af\u30ed\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u4f7f\u3048\u306a\u3044\u3002 \u4ed6\u306b\u3082C++\u7528\u306e\u95a2\u6570\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3059\u308b\u3002 \u3061\u306a\u307f\u306b\u3001\u30d8\u30c3\u30c0\u30fc\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u6642\u306f extern \"C\" \u3092\u3064\u3051\u306a\u3044\u3002 PETSc\u306econfigure\u306e\u5b9f\u884c\u30aa\u30d7\u30b7\u30e7\u30f3 \u516c\u5f0f\u30b5\u30a4\u30c8 \u306b\u7528\u9014\u306b\u5fdc\u3058\u3066\u4f7f\u3046\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u793a\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u3069\u3093\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308b\u306e\u304b\u793a\u3055\u308c\u3066\u3044\u306a\u3044\u3002 \u3069\u3093\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308b\u306e\u304b\u8abf\u3079\u308b\u305f\u3081\u306e\u4e00\u756a\u624b\u3063\u53d6\u308a\u65e9\u3044\u65b9\u6cd5\u306f\u3001 CI\u306e\u30c6\u30b9\u30c8 \u3092\u898b\u308b\u3053\u3068\u3067\u3042\u308b\u3002 \u5730\u9053\u306a\u65b9\u6cd5\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u308b\u3053\u3068\u3060\u304c\u3001 BuildSystem \u304c\u3042\u307e\u308a\u306b\u8907\u96d1\u306a\u306e\u3067\u6642\u9593\u304c\u304b\u304b\u308b\u3060\u308d\u3046\u3002 \u500b\u4eba\u7684\u306b\u306f package \u3092\u898b\u308b\u3068\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u6bce\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3069\u3046\u3044\u3046\u98a8\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u304b\u308f\u304b\u308b\u306e\u3067\u3001\u3053\u3053\u3092\u898b\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3059\u308b\u3002 \u53c2\u8003 Thrust 1.9.4 \u30ea\u30ea\u30fc\u30b9\u30ce\u30fc\u30c8 Predefined Node Types (oneTBB Documentation) Undo git fast forward merge \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5909\u6570\u304c\u30e9\u30e0\u30c0\u95a2\u6570\u306b\u30ad\u30e3\u30d7\u30c1\u30e3\u3055\u308c\u308b\u3053\u3068\u306b\u3088\u308b\u30a8\u30e9\u30fc\u306e\u4f8b \u518d\u5e30\u7684\u306a\u69cb\u9020\u4f53\u306e\u4f8b","title":"\u30e1\u30e2"},{"location":"blog/memo/#_1","text":"\u5c0f\u30cd\u30bf\u96c6\u3067\u3059\u3002","title":"\u30e1\u30e2"},{"location":"blog/memo/#blenderalembic","text":"\u901f\u5ea6\u306f\u51fa\u529b\u3055\u308c\u306a\u3044 \u525b\u4f53\u904b\u52d5\u306fXformSample\u306b\u8a18\u9332\u3055\u308c\u308b \u30bd\u30d5\u30c8\u30dc\u30c7\u30a3\u306e\u904b\u52d5\u306fXformSample\u306b\u8a18\u9332\u3055\u308c\u306a\u3044 \u30bd\u30d5\u30c8\u30dc\u30c7\u30a3\u3068\u525b\u4f53\u304c\u3042\u308b\u6642\u3001\u4f8b\u3048\u525b\u4f53\u3067\u3042\u3063\u3066\u3082\u5404\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306e\u30dd\u30ea\u30b4\u30f3\u30e1\u30c3\u30b7\u30e5\u306e\u60c5\u5831(\u70b9\u3001\u6cd5\u7dda\u3001\u9762)\u304c\u51fa\u529b\u3055\u308c\u308b\u3002","title":"Blender\u3067Alembic\u3092\u51fa\u529b\u3057\u305f\u5834\u5408"},{"location":"blog/memo/#thrust","text":"oneTBB\u3092\u30c7\u30d0\u30a4\u30b9\u3068\u3057\u3066\u4f7f\u3046\u5834\u5408\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 -expt-extended-lambda \u3092nvcc\u306b\u6e21\u3057\u3066\u3082\u30e9\u30e0\u30c0\u5f0f\u3092\u30c7\u30d0\u30a4\u30b9\u30b3\u30fc\u30c9\u3067\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002 \u5165\u308c\u5b50\u306b\u306a\u3063\u305f host_vector \u3068 device_vector \u306f\u304a\u4e92\u3044\u306b\u30b3\u30d4\u30fc\u3067\u304d\u306a\u3044(\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b)\u3002","title":"Thrust"},{"location":"blog/memo/#c","text":"C++\u6a19\u6e96async+future\u3068\u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb\u306e\u6027\u80fd\u6bd4\u8f03 \u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u3068default\u5ba3\u8a00\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30de\u30af\u30ed\u3067\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002 struct A final {} \u306f\u5408\u6cd5\u3002 \u30e9\u30e0\u30c0\u95a2\u6570\u306f\u9759\u7684\u306a\u5909\u6570\u3092\u81ea\u52d5\u7684\u306b\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u3002 \u4ee5\u4e0b\u306e\u3088\u3046\u306a\u518d\u5e30\u7684\u306a\u69cb\u9020\u4f53\u306f\u5408\u6cd5\u3002 template <int D> struct A { static_assert(D > 1); double d; A<D-1> a; }; template <> struct A<1> { int d; }; \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30af\u30e9\u30b9\u306e\u9759\u7684\u306a\u30e1\u30f3\u30d0\u5b9a\u6570\u306f inline \u306b\u3059\u308b\u3068\u660e\u793a\u7684\u306b\u5b9f\u4f53\u3092\u5b9a\u7fa9\u305b\u305a\u306b\u6e08\u3080\u3002 \u30e1\u30f3\u30d0\u5909\u6570\u306b const \u3092\u4ed8\u3051\u308b\u3068 default \u5ba3\u8a00\u3055\u308c\u305f\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u524a\u9664\u3055\u308c\u308b\u3002","title":"C++"},{"location":"blog/memo/#boost","text":"Boost.Test\u3092CMake\u306e find_package \u3067\u898b\u3064\u3051\u305f\u3044\u6642\u306f\u3001 components \u306b unit_test_framework \u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002","title":"Boost"},{"location":"blog/memo/#git","text":"git push --force-with-lease git rm \u3067\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u6d88\u305b\u308b\u3002 fast-forward\u3067\u306e\u30de\u30fc\u30b8\u3092\u53d6\u308a\u6d88\u3057\u305f\u3044\u6642\u306f\u3001 git reflog --keep (\u30d6\u30e9\u30f3\u30c1\u540d)@{\u756a\u53f7} \u3068\u3059\u308c\u3070\u826f\u3044\u3002 \u6700\u65b0\u306e\u30b3\u30df\u30c3\u30c8\u3057\u304b\u8981\u3089\u306a\u3044\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3057\u305f\u3044\u6642\u3001 --depth 1 \u3092\u3064\u3051\u308c\u3070\u826f\u3044\u3002 \u8ffd\u8de1\u3057\u3066\u3044\u306a\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u6d88\u3057\u305f\u3044\u6642\u306f git clean \u3002 \u8ffd\u8de1\u3057\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u5168\u3066\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3057\u305f\u3044\u6642\u306f git add -u \u3002","title":"Git"},{"location":"blog/memo/#petc","text":"","title":"PETc"},{"location":"blog/memo/#petscc","text":"PETSc\u306b\u306f PetscCallThrow \u3068\u3044\u3046\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u3068 std::runtime_error \u3092\u6295\u3052\u308b\u95a2\u6570\u304c\u3042\u308b\u3002 \u3053\u306e\u95a2\u6570\u306f PETSC_CLANGUAGE_CXX \u3068\u3044\u3046\u30de\u30af\u30ed\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u4f7f\u3048\u306a\u3044\u3002 \u4ed6\u306b\u3082C++\u7528\u306e\u95a2\u6570\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3059\u308b\u3002 \u3061\u306a\u307f\u306b\u3001\u30d8\u30c3\u30c0\u30fc\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u6642\u306f extern \"C\" \u3092\u3064\u3051\u306a\u3044\u3002","title":"PETSc\u306eC++\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u306b\u306f"},{"location":"blog/memo/#petscconfigure","text":"\u516c\u5f0f\u30b5\u30a4\u30c8 \u306b\u7528\u9014\u306b\u5fdc\u3058\u3066\u4f7f\u3046\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u793a\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u3069\u3093\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308b\u306e\u304b\u793a\u3055\u308c\u3066\u3044\u306a\u3044\u3002 \u3069\u3093\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308b\u306e\u304b\u8abf\u3079\u308b\u305f\u3081\u306e\u4e00\u756a\u624b\u3063\u53d6\u308a\u65e9\u3044\u65b9\u6cd5\u306f\u3001 CI\u306e\u30c6\u30b9\u30c8 \u3092\u898b\u308b\u3053\u3068\u3067\u3042\u308b\u3002 \u5730\u9053\u306a\u65b9\u6cd5\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u308b\u3053\u3068\u3060\u304c\u3001 BuildSystem \u304c\u3042\u307e\u308a\u306b\u8907\u96d1\u306a\u306e\u3067\u6642\u9593\u304c\u304b\u304b\u308b\u3060\u308d\u3046\u3002 \u500b\u4eba\u7684\u306b\u306f package \u3092\u898b\u308b\u3068\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u6bce\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3069\u3046\u3044\u3046\u98a8\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u304b\u308f\u304b\u308b\u306e\u3067\u3001\u3053\u3053\u3092\u898b\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3059\u308b\u3002","title":"PETSc\u306econfigure\u306e\u5b9f\u884c\u30aa\u30d7\u30b7\u30e7\u30f3"},{"location":"blog/memo/#_2","text":"Thrust 1.9.4 \u30ea\u30ea\u30fc\u30b9\u30ce\u30fc\u30c8 Predefined Node Types (oneTBB Documentation) Undo git fast forward merge \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5909\u6570\u304c\u30e9\u30e0\u30c0\u95a2\u6570\u306b\u30ad\u30e3\u30d7\u30c1\u30e3\u3055\u308c\u308b\u3053\u3068\u306b\u3088\u308b\u30a8\u30e9\u30fc\u306e\u4f8b \u518d\u5e30\u7684\u306a\u69cb\u9020\u4f53\u306e\u4f8b","title":"\u53c2\u8003"},{"location":"blog/thrust-async/","text":"Thrust\u306e\u975e\u540c\u671f\u5b9f\u884c Thrust\u306e\u975e\u540c\u671f\u5b9f\u884c\u306b\u3064\u3044\u3066\u3067\u3059\u304c\u3001\u65e5\u672c\u8a9e\u306e\u6587\u732e\u304c\u300e thrust\u306basync\u30b5\u30dd\u30fc\u30c8\u304c\u5165\u3063\u3066\u3044\u305f \u300f\u304f\u3089\u3044\u3057\u304b\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u5177\u4f53\u4f8b\u3092\u4ea4\u3048\u306a\u304c\u3089\u74b0\u5883\u69cb\u7bc9\u304b\u3089\u89e3\u8aac\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002 \u74b0\u5883\u69cb\u7bc9 CMake\u3092\u4f7f\u3046\u3084\u308a\u65b9\u3092\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002 Windows\u3067\u306f\u8a66\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u3054\u4e86\u627f\u4e0b\u3055\u3044\u3002 \u4ee5\u4e0b\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002 CUDA >= 12.3 CMake >= 3.27.7 GCC >= 5.1 \u307e\u305f\u306f Clang >= 3.4 Git\u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u304c\u3001\u306a\u304f\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002 Thrust\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 Thrust \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 1.9.4\u4ee5\u4e0a\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u9078\u3093\u3067\u4e0b\u3055\u3044\u3002 Git\u3092\u4f7f\u3046\u65b9\u306f\u518d\u5e30\u7684\u306b\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30af\u30ed\u30fc\u30f3\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u306a\u305c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3001CMake\u304cThrust\u3092\u898b\u3064\u3051\u3066\u304f\u308c\u306a\u304b\u3063\u305f\u305f\u3081\u3067\u3059\u3002 \u898b\u3064\u3051\u65b9\u3092\u3054\u5b58\u3058\u306e\u65b9\u306f\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002 CMake\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210 \u4f8b\u3068\u3057\u3066\u3001 float \u3068 int \u306e\u914d\u5217\u3092\u4f5c\u6210\u3057\u3001GPU\u3067\u5404\u8981\u7d20\u306e2\u4e57\u3092\u8a08\u7b97\u3057\u3001\u7d50\u679c\u304c\u6b63\u3057\u3044\u304b\u78ba\u8a8d\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u3088\u3046\u306bCMake\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 hoge/-- CMakeLists.txt |- double.cu |- double.h |- main.cpp |- thrust/ CMakeLists.txt\u306b\u4ee5\u4e0b\u3092\u66f8\u304d\u307e\u3059\u3002 cmake_minimum_required(VERSION 3.27.7) # CUDA\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u6307\u5b9a\u3059\u308b\u3002 # \u6700\u521d\u306b\u8a2d\u5b9a\u3057\u306a\u3044\u3068\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u4f5c\u6210\u3067\u304d\u307e\u305b\u3093\u3002 if(NOT DEFINED CMAKE_CUDA_ARCHITECTURES) set(CMAKE_CUDA_ARCHITECTURES native) endif() project(my_program VERSION 0.1.0 LANGUAGES CXX CUDA) # \u3053\u3053\u306e\u8a2d\u5b9a\u306f\u304a\u597d\u307f\u3067\u3002 set(CMAKE_CXX_EXTENSIONS OFF) set(CMAKE_OPTIMIZE_DEPENDENCIES ON) # CUDA\u3092\u898b\u3064\u3051\u308b\u3002 find_package(CUDAToolkit 12 REQUIRED) # Thrust\u3092\u898b\u3064\u3051\u308b\u3002 add_subdirectory(thrust) find_package(Thrust REQUIRED CONFIG) thrust_create_target(Thrust) # CUDA\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308b\u3002 add_library(double double.cu) target_compile_options( double PRIVATE # C++14\u4ee5\u4e0a\u304c\u5fc5\u8981 cxx_std_14 # \u30e9\u30e0\u30c0\u5f0f\u3092\u30c7\u30d0\u30a4\u30b9\u30b3\u30fc\u30c9\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3002 -expt-extended-lambda # SIMD\u3092\u7121\u52b9\u306b\u3059\u308b\u3002 # SIMD\u306e\u7121\u52b9\u5316\u306f\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001Eigen\u306a\u3069\u7dda\u5f62\u4ee3\u6570\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u969b\u306b\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \"$<$<COMPILE_LANG_AND_ID:CXX,GNU>:-fno-tree-vectorize>\" \"$<$<COMPILE_LANG_AND_ID:CXX,Clang>:-fno-vectorize>\" ) # \u3053\u3053\u306f\u304a\u597d\u307f\u3067\u3002 target_compile_features( double PRIVATE cuda_std_20 ) # \u8ab0\u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u306a\u3044\u306f\u305a\u306a\u306e\u3067\u3001\u7c21\u7565\u306b\u3002 target_include_directories( double PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ) # CUDA\u30e9\u30f3\u30bf\u30a4\u30e0\u3068Thrust\u3092\u30ea\u30f3\u30af\u3059\u308b\u3002 # \u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u3001Thrust\u306b\u306fCUDA\u306f\u306a\u3044\u306e\u3067\u3002 target_link_libraries( double PUBLIC CUDA::cudart Thrust ) # my_program\u3092\u4f5c\u308b\u3002 add_executable(my_program main.cpp) target_link_libraries( my_program PRIVATE double ) # \u3053\u3053\u306f\u304a\u597d\u307f\u3067\u3002 target_compile_features( my_program PRIVATE cxx_std_20 ) # \u3053\u3053\u306f\u304a\u597d\u307f\u3067\u3002 target_compile_options( my_program PRIVATE \"$<$<CONFIG:Debug>:-g;-O0;-Wall;-Wextra>\" \"$<$<CONFIG:Release>:-DNDEBUG;-O3;-march=native;-mtune=native>\" ) # CUDA 5.0\u4ee5\u524d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u3001\u30c7\u30d0\u30a4\u30b9\u30b3\u30fc\u30c9\u3067\u4f7f\u7528\u3059\u308b\u95a2\u6570\u306e\u5b9f\u88c5\u307e\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c # \u3042\u308a\u307e\u3057\u305f\u304c\u3001CUDA 5.0\u4ee5\u964d\u3067\u306f\u3001\u30c7\u30d0\u30a4\u30b9\u30b3\u30fc\u30c9\u3067\u4f7f\u7528\u3059\u308b\u95a2\u6570\u306e\u5ba3\u8a00\u306e\u307f\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u3060\u3051\u3067 # \u5341\u5206\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # \u3053\u306e\u3053\u3068\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u3068\u30ea\u30f3\u30ab\u30fc\u306b\u4f1d\u3048\u308b\u305f\u3081\u306b\u3001CUDA_SEPARABLE_COMPILATION\u30d7\u30ed\u30d1\u30c6\u30a3\u3092ON\u306b # \u3057\u3066\u3044\u307e\u3059\u3002 # \u305f\u3060\u3057\u3001\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u306e\u307fON\u306b\u8a2d\u5b9a\u3057\u3066\u4e0b\u3055\u3044\u3002 # \u8a73\u3057\u304f\u306f\u53c2\u8003\u6587\u732e1\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 set_property(TARGET my_program PROPERTY CUDA_SEPARABLE_COMPILATION ON) Thrust\u306e\u975e\u540c\u671f\u5b9f\u884c\u306e\u66f8\u304d\u65b9 \u3044\u3088\u3044\u3088\u672c\u984c\u3067\u3059\u3002 event\u3068future Thrust\u306b\u306f event \u3068 future \u304c\u3042\u308a\u307e\u3059\u3002 future \u306f reduce \u304b\u3089\u8fd4\u3055\u308c\u3001\u305d\u306e\u4ed6\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f event \u3092\u8fd4\u3057\u307e\u3059\u3002 \u3069\u3061\u3089\u3082 wait() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u975e\u540c\u671f\u5b9f\u884c\u304c\u7d42\u308f\u308b\u307e\u3067\u5f85\u3061\u307e\u3059\u3002 future \u306f\u3055\u3089\u306b get() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u5b9f\u884c\u7d50\u679c\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u65b9\u306f\u53c2\u8003\u6587\u732e2\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002 event \u306f unique_eager_event \u30af\u30e9\u30b9\u306b, future \u306f unique_eager_future \u30af\u30e9\u30b9\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002 \u30d8\u30c3\u30c0\u30fc\u306f\u305d\u308c\u305e\u308cthrust/event.h, thrust/future.h\u3067\u3059\u3002 \u4eca\u56de\u306f\u8a08\u7b97\u7d50\u679c\u3092 host_vector \u306b\u683c\u7d0d\u3059\u308b\u306e\u3067\u3001\u4f7f\u3046\u306e\u306f\u5b9f\u884c\u304c\u5b8c\u4e86\u3057\u305f\u304b\u78ba\u8a8d\u3059\u308b\u3060\u3051\u306e event \u3067\u3059\u3002 double.h #include <thrust/event.h> #include <thrust/host_vector.h> thrust::device_event Double(thrust::host_vector<float>& doubles, thrust::host_vector<int>& ints); \u3053\u3053\u3067 device_event \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u30db\u30b9\u30c8\u3067\u3082\u4f7f\u3048\u307e\u3059\u3002 host_event \u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u5f8c\u306e\u300c\u6b20\u70b9\u300d\u306e\u7bc0\u3067\u3053\u306e\u3053\u3068\u306b\u89e6\u308c\u307e\u3059\u3002 __global__ \u306f\u3042\u3063\u3066\u3082\u306a\u304f\u3066\u3082\u3044\u3044\u3067\u3059\u3002 \u975e\u540c\u671f\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u5b9f\u884c\u30dd\u30ea\u30b7\u30fc Thrust\u306b\u306f copy \u3084 transform \u3068\u3044\u3063\u305f\u3001STL\u306e\u3088\u3046\u306a\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u3089\u3092\u975e\u540c\u671f\u306b\u5b9f\u884c\u3057\u305f\u3044\u5834\u5408\u306f\u3001 async \u540d\u524d\u7a7a\u9593\u306e\u3082\u306e\u3092\u4f7f\u3048\u3070\u3044\u3044\u3067\u3059\u3002 \u4f8b\u3048\u3070\u3001 thrust::copy \u306e\u975e\u540c\u671f\u7248\u306f thrust::async::copy \u3067\u3059\u3002 \u5b9f\u884c\u30dd\u30ea\u30b7\u30fc\u3068\u306f\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u30db\u30b9\u30c8\u3067\u5b9f\u884c\u3059\u308b\u306e\u304b\u3001\u30c7\u30d0\u30a4\u30b9\u3067\u5b9f\u884c\u3059\u308b\u306e\u304b\u3001\u305d\u308c\u3068\u3082\u9010\u6b21\u7684\u306b\u51e6\u7406\u3059\u308b\u306e\u304b\u3092\u6307\u5b9a\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002 \u30af\u30e9\u30b9\u540d\u306f\u305d\u308c\u305e\u308c host \u3001 device \u3001 seq \u3067\u3059\u3002 \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u7121\u99c4\u306a\u30c7\u30fc\u30bf\u306e\u30b3\u30d4\u30fc\u3092\u6e1b\u3089\u305b\u307e\u3059\u3002 \u5b9f\u88c5\u306f\u30bf\u30b0\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3067\u3001\u81ea\u5206\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002 \u8a73\u3057\u304f\u306f\u53c2\u8003\u6587\u732e3\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002 \u5b9f\u884c\u30dd\u30ea\u30b7\u30fc\u81ea\u4f53\u306f\u540c\u671f\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u5bfe\u3057\u3066\u3082\u4f7f\u3048\u307e\u3059\u304c\u3001\u975e\u540c\u671f\u306a\u3089 host \u3068 device \u306e after \u30e1\u30f3\u30d0\u95a2\u6570\u306b event \u3068 future \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5b9f\u884c\u9806\u5e8f\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 event \u3068 future \u306e\u500b\u6570\u306f\u4f55\u500b\u3067\u3082\u3044\u3044\u3067\u3059\u3002 \u307e\u305f\u3001 thrust::when_all \u95a2\u6570\u3067\u8907\u6570\u306e event \u3068 future \u3092\u4e00\u3064\u306e event \u306b\u307e\u3068\u3081\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u3089\u3092\u8e0f\u307e\u3048\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002 double.cu #include <thrust/async/copy.h> #include <thrust/async/transform.h> #include <thrust/device_vector.h> #include \"double.h\" template <class T> thrust::device_event Double(thrust::host_vector<T>& ts) { // \u30c7\u30d0\u30a4\u30b9\u5074\u306e\u914d\u5217\u3092\u7528\u610f auto device_ts = thrust::device_vector<T>(); // \u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u521d\u671f\u5316 device_ts.resize(ts.size()); // \u30db\u30b9\u30c8\u304b\u3089\u30c7\u30d0\u30a4\u30b9\u3078\u306e\u975e\u540c\u671f\u30b3\u30d4\u30fc auto copy_ts_event = thrust::async::copy( thrust::host, thrust::device, ts.begin(), ts.end(), device_ts.begin() ); // \u30c7\u30d0\u30a4\u30b9\u5074\u3067\u306e\u8a08\u7b97 auto double_ts_event = thrust::async::transform( thrust::device.after(copy_ts_event), device_ts.begin(), device_ts.end(), device_ts.begin(), [] __device__(T d) { return d * d; } ); // \u30c7\u30d0\u30a4\u30b9\u304b\u3089\u30db\u30b9\u30c8\u3078\u306e\u975e\u540c\u671f\u30b3\u30d4\u30fc auto copy_back_ts_event = thrust::async::copy( thrust::device.after(double_ts_event), device_ts.begin(), device_ts.end(), ts.begin() ); return copy_back_ts_event; } thrust::device_event Double(thrust::host_vector<float>& floats, thrust::host_vector<int>& ints) { // \u975e\u540c\u671f\u5b9f\u884c\u306e\u5b8c\u4e86\u3092\u307e\u3068\u3081\u308b return thrust::when_all(Double(floats), Double(ints)); } int \u3068 float \u306e\u914d\u5217\u306e\u305d\u308c\u305e\u308c\u306b\u5bfe\u3057\u3066\u3001\u30c7\u30d0\u30a4\u30b9\u3078\u306e\u30b3\u30d4\u30fc\u304c\u5b8c\u4e86\u3057\u305f\u3089\u30012\u4e57\u3059\u308b\u8a08\u7b97\u3092\u884c\u3044\u3001\u7d42\u308f\u308c\u3070\u30db\u30b9\u30c8\u3078\u30b3\u30d4\u30fc\u3059\u308b\u51e6\u7406\u3092\u9806\u756a\u306b\u5b9f\u884c\u30dd\u30ea\u30b7\u30fc\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002 \u6700\u5f8c\u306b\u3001\u4e21\u65b9\u306e\u914d\u5217\u304c\u30db\u30b9\u30c8\u3078\u30b3\u30d4\u30fc\u3055\u308c\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e event \u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002 \u3042\u3068\u306f\u3001 main \u95a2\u6570\u3067\u5404\u914d\u5217\u3092\u4f5c\u3063\u3066\u3001 Double \u95a2\u6570\u306b\u6e21\u3057\u3066\u3001\u7d50\u679c\u304c\u6b63\u3057\u3044\u304b\u78ba\u8a8d\u3059\u308b\u3060\u3051\u3067\u3059\u3002 main.cpp #include \"double.h\" #include <cassert> #include <cmath> #include <iostream> int main() { auto floats = thrust::host_vector<float>(); auto ints = thrust::host_vector<int>(); std::size_t size = 10000; floats.reserve(size); ints.reserve(size); for (std::size_t i = 0; i < size; ++i) { floats.push_back(i); ints.push_back(i); } auto event = Double(floats, ints); event.wait(); for (std::size_t i = 0; i < size; ++i) { assert(std::abs(floats[i] - i * i) < 1e-5); assert(ints[i] == static_cast<int>(i * i)); } std::cout << \"Success!\\n\"; return 0; } \u672c\u5f53\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u306e\u6bd4\u8f03\u3092\u3082\u3046\u5c11\u3057\u4e01\u5be7\u306b\u3059\u308b\u3079\u304d\u3067\u3059\u304c\u3001\u672c\u984c\u3068\u95a2\u4fc2\u306a\u3044\u306e\u3067\u826f\u3057\u3068\u3057\u307e\u3059\u3002 \u5229\u70b9 \u4e00\u822c\u306b\u975e\u540c\u671f\u5b9f\u884c\u3068\u3044\u3046\u3068\u8eab\u69cb\u3048\u308b\u65b9\u304c\u591a\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u304c\u3001\u4e0a\u306e\u89e3\u8aac\u3092\u898b\u308b\u3068\u610f\u5916\u3068\u7c21\u5358\u306b\u3067\u304d\u308b\u3068\u601d\u308f\u308c\u305f\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002 \u307e\u305f\u3001\u5b9f\u884c\u30dd\u30ea\u30b7\u30fc\u3067\u5b9f\u884c\u9806\u5e8f\u3092\u6307\u5b9a\u3067\u304d\u308b\u306e\u3082\u9b45\u529b\u7684\u3067\u3059\u3002 \u975e\u540c\u671f\u51e6\u7406\u306e\u5229\u70b9\u3068\u3044\u3046\u3088\u308aThrust\u3092\u4f7f\u3046\u5229\u70b9\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u5b9f\u306frocThrust\u3068\u3044\u3046\u3001CUDA\u3092HIP\u3068ROCm\u306b\u7f6e\u304d\u63db\u3048\u305fThrust\u3092AMD\u304c\u958b\u767a\u3057\u3066\u3044\u307e\u3059\u3002 \u73fe\u6642\u70b9\u3067\u306f\u3001Thrust 1.17.2\u307e\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u975e\u540c\u671f\u5b9f\u884c\u3082\u3067\u304d\u307e\u3059\u3002 \u8a73\u3057\u304f\u306f\u53c2\u8003\u6587\u732e4\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002 \u6b20\u70b9 \u6b8b\u5ff5\u306a\u304c\u3089\u6b20\u70b9\u304c\u3042\u308a\u307e\u3059\u3002 1\u3064\u76ee\u306e\u6b20\u70b9\u306fCUDA\u304c\u30c7\u30d0\u30a4\u30b9\u306e\u6642\u304b\u3064\u30c7\u30d0\u30a4\u30b9\u5074\u3067\u3057\u304b\u4f7f\u3048\u306a\u3044\u3053\u3068\u3067\u3059\u3002 Thrust\u306foneTBB\u3092\u30c7\u30d0\u30a4\u30b9\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u975e\u540c\u671f\u51e6\u7406\u306foneTBB\u3067\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u30b7\u30ea\u30a2\u30eb\u3084OpenMP\u3082\u540c\u69d8\u3067\u3059\u3002 \u300cevent\u3068future\u300d\u7bc0\u3067\u89e6\u308c\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u304c host_event \u304c\u306a\u3044\u7406\u7531\u3060\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002 \u3057\u304b\u3057\u3001\u3053\u306e\u6b20\u70b9\u306f\u3055\u307b\u3069\u554f\u984c\u306b\u306a\u3089\u306a\u3044\u3067\u3057\u3087\u3046\u3002 2\u3064\u76ee\u306e\u6b20\u70b9\u306f async::copy \u304c\u8ee2\u9001\u3059\u308b\u30c7\u30fc\u30bf\u306e\u578b\u306b\u5bfe\u3057\u3066 trivially relocatable \u3067\u3042\u308b\u3053\u3068\u3092\u8981\u6c42\u3057\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002 trivially relocatable\u306a\u578b\u3068\u306f\u3001\u7c21\u5358\u306b\u8a00\u3046\u3068\u30b3\u30d4\u30fc\u3068\u30e0\u30fc\u30d6\u3001\u7834\u68c4\u304c default \u3067\u51fa\u6765\u3066\u3001\u4eee\u60f3\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u4eee\u60f3\u7d99\u627f\u3092\u6301\u305f\u305a\u3001\u5168\u3066\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3068\u57fa\u5e95\u30af\u30e9\u30b9\u3082trivially relocatable\u306a\u578b\u3067\u3059\u3002 \u3053\u308c\u306f memcpy \u3067\u30db\u30b9\u30c8\u3068\u30c7\u30d0\u30a4\u30b9\u9593\u3067\u30c7\u30fc\u30bf\u8ee2\u9001\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u5c0e\u5165\u3055\u308c\u307e\u3057\u305f\u3002 Thrust\u3067\u306f\u3001 THRUST_PROCLAIM_TRIVIALLY_RELOCATABLE \u30de\u30af\u30ed\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\u4e0e\u3048\u305f\u578b\u304ctrivially relocatable\u3067\u3042\u308b\u3068\u5ba3\u8a00\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u5236\u7d04\u304c\u5f37\u3044\u3082\u306e\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306f\u5411\u4e0a\u3057\u3001 \u79c1\u304c\u884c\u3063\u305f\u5b9f\u9a13 \u3067\u306f\u305d\u3046\u3067\u306a\u3044\u3082\u306e\u306b\u6bd4\u3079\u3066\u5b9f\u884c\u6642\u9593\u304c\u7d0430%\u6e1b\u3063\u3066\u3044\u307e\u3059\u3002 \u8a73\u3057\u304f\u306f\u53c2\u8003\u6587\u732e5\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002 \u5b9f\u306f... Thrust\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u3054\u89a7\u306b\u306a\u308b\u3068\u308f\u304b\u308b\u306e\u3067\u3059\u304c\u3001\u306a\u3093\u3068\u30a2\u30fc\u30ab\u30a4\u30d6\u306b\u3055\u308c\u3066\u307e\u3059\u3002 \u3069\u3046\u3084\u3089\u534a\u5e74\u524d\u304b\u3089 CCCL \u3068\u3044\u3046\u3001CUB\u3068libcudacxx\u3082\u4e00\u7dd2\u306b\u3057\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u79fb\u3063\u305f\u3088\u3046\u3067\u3059\u3002 \u3053\u306e\u3053\u3068\u306b\u6c17\u3065\u3044\u305f\u306e\u304c\u4e00\u6628\u65e5\u3060\u3063\u305f\u306e\u3067\u3001\u6628\u65e5CCCL\u3067\u3082\u30d3\u30eb\u30c9\u3067\u304d\u308b\u304b\u8a66\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u4e0a\u8ff0\u306e\u3084\u308a\u65b9\u3067\u306f\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002 \u3069\u3046\u306b\u304b\u89e3\u6c7a\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u6642\u9593\u3082\u306a\u304b\u3063\u305f\u306e\u3067\u3068\u308a\u3042\u3048\u305aThrust\u306b\u5bfe\u3057\u3066\u66f8\u304d\u307e\u3057\u305f\u3002 \u3082\u3057\u3054\u5b58\u3058\u306e\u65b9\u304c\u3044\u3089\u3063\u3057\u3083\u3063\u305f\u3089\u3001\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002 \u307e\u3068\u3081 \u30c7\u30fc\u30bf\u304ctrivially relocatable\u306a\u578b\u306a\u3089\u3001\u304a\u624b\u8efd\u306b\u975e\u540c\u671f\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 GitHub \u306b\u7f6e\u3044\u3066\u3044\u307e\u3059\u3002 \u53c2\u8003\u6587\u732e https://developer.nvidia.com/blog/separate-compilation-linking-cuda-device-code/ https://github.com/NVIDIA/thrust/blob/main/thrust/system/cuda/detail/future.inl https://github.com/NVIDIA/thrust/blob/main/thrust/execution_policy.h https://github.com/ROCmSoftwarePlatform/rocThrust https://github.com/NVIDIA/thrust/releases/tag/1.9.4","title":"Thrust\u306e\u975e\u540c\u671f\u5b9f\u884c"},{"location":"blog/thrust-async/#thrust","text":"Thrust\u306e\u975e\u540c\u671f\u5b9f\u884c\u306b\u3064\u3044\u3066\u3067\u3059\u304c\u3001\u65e5\u672c\u8a9e\u306e\u6587\u732e\u304c\u300e thrust\u306basync\u30b5\u30dd\u30fc\u30c8\u304c\u5165\u3063\u3066\u3044\u305f \u300f\u304f\u3089\u3044\u3057\u304b\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u5177\u4f53\u4f8b\u3092\u4ea4\u3048\u306a\u304c\u3089\u74b0\u5883\u69cb\u7bc9\u304b\u3089\u89e3\u8aac\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002","title":"Thrust\u306e\u975e\u540c\u671f\u5b9f\u884c"},{"location":"blog/thrust-async/#_1","text":"CMake\u3092\u4f7f\u3046\u3084\u308a\u65b9\u3092\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002 Windows\u3067\u306f\u8a66\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u3054\u4e86\u627f\u4e0b\u3055\u3044\u3002 \u4ee5\u4e0b\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002 CUDA >= 12.3 CMake >= 3.27.7 GCC >= 5.1 \u307e\u305f\u306f Clang >= 3.4 Git\u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u304c\u3001\u306a\u304f\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002","title":"\u74b0\u5883\u69cb\u7bc9"},{"location":"blog/thrust-async/#thrust_1","text":"Thrust \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 1.9.4\u4ee5\u4e0a\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u9078\u3093\u3067\u4e0b\u3055\u3044\u3002 Git\u3092\u4f7f\u3046\u65b9\u306f\u518d\u5e30\u7684\u306b\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30af\u30ed\u30fc\u30f3\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u306a\u305c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3001CMake\u304cThrust\u3092\u898b\u3064\u3051\u3066\u304f\u308c\u306a\u304b\u3063\u305f\u305f\u3081\u3067\u3059\u3002 \u898b\u3064\u3051\u65b9\u3092\u3054\u5b58\u3058\u306e\u65b9\u306f\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002","title":"Thrust\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9"},{"location":"blog/thrust-async/#cmake","text":"\u4f8b\u3068\u3057\u3066\u3001 float \u3068 int \u306e\u914d\u5217\u3092\u4f5c\u6210\u3057\u3001GPU\u3067\u5404\u8981\u7d20\u306e2\u4e57\u3092\u8a08\u7b97\u3057\u3001\u7d50\u679c\u304c\u6b63\u3057\u3044\u304b\u78ba\u8a8d\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u3088\u3046\u306bCMake\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 hoge/-- CMakeLists.txt |- double.cu |- double.h |- main.cpp |- thrust/ CMakeLists.txt\u306b\u4ee5\u4e0b\u3092\u66f8\u304d\u307e\u3059\u3002 cmake_minimum_required(VERSION 3.27.7) # CUDA\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u6307\u5b9a\u3059\u308b\u3002 # \u6700\u521d\u306b\u8a2d\u5b9a\u3057\u306a\u3044\u3068\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u4f5c\u6210\u3067\u304d\u307e\u305b\u3093\u3002 if(NOT DEFINED CMAKE_CUDA_ARCHITECTURES) set(CMAKE_CUDA_ARCHITECTURES native) endif() project(my_program VERSION 0.1.0 LANGUAGES CXX CUDA) # \u3053\u3053\u306e\u8a2d\u5b9a\u306f\u304a\u597d\u307f\u3067\u3002 set(CMAKE_CXX_EXTENSIONS OFF) set(CMAKE_OPTIMIZE_DEPENDENCIES ON) # CUDA\u3092\u898b\u3064\u3051\u308b\u3002 find_package(CUDAToolkit 12 REQUIRED) # Thrust\u3092\u898b\u3064\u3051\u308b\u3002 add_subdirectory(thrust) find_package(Thrust REQUIRED CONFIG) thrust_create_target(Thrust) # CUDA\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308b\u3002 add_library(double double.cu) target_compile_options( double PRIVATE # C++14\u4ee5\u4e0a\u304c\u5fc5\u8981 cxx_std_14 # \u30e9\u30e0\u30c0\u5f0f\u3092\u30c7\u30d0\u30a4\u30b9\u30b3\u30fc\u30c9\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3002 -expt-extended-lambda # SIMD\u3092\u7121\u52b9\u306b\u3059\u308b\u3002 # SIMD\u306e\u7121\u52b9\u5316\u306f\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001Eigen\u306a\u3069\u7dda\u5f62\u4ee3\u6570\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u969b\u306b\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \"$<$<COMPILE_LANG_AND_ID:CXX,GNU>:-fno-tree-vectorize>\" \"$<$<COMPILE_LANG_AND_ID:CXX,Clang>:-fno-vectorize>\" ) # \u3053\u3053\u306f\u304a\u597d\u307f\u3067\u3002 target_compile_features( double PRIVATE cuda_std_20 ) # \u8ab0\u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u306a\u3044\u306f\u305a\u306a\u306e\u3067\u3001\u7c21\u7565\u306b\u3002 target_include_directories( double PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ) # CUDA\u30e9\u30f3\u30bf\u30a4\u30e0\u3068Thrust\u3092\u30ea\u30f3\u30af\u3059\u308b\u3002 # \u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u3001Thrust\u306b\u306fCUDA\u306f\u306a\u3044\u306e\u3067\u3002 target_link_libraries( double PUBLIC CUDA::cudart Thrust ) # my_program\u3092\u4f5c\u308b\u3002 add_executable(my_program main.cpp) target_link_libraries( my_program PRIVATE double ) # \u3053\u3053\u306f\u304a\u597d\u307f\u3067\u3002 target_compile_features( my_program PRIVATE cxx_std_20 ) # \u3053\u3053\u306f\u304a\u597d\u307f\u3067\u3002 target_compile_options( my_program PRIVATE \"$<$<CONFIG:Debug>:-g;-O0;-Wall;-Wextra>\" \"$<$<CONFIG:Release>:-DNDEBUG;-O3;-march=native;-mtune=native>\" ) # CUDA 5.0\u4ee5\u524d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u3001\u30c7\u30d0\u30a4\u30b9\u30b3\u30fc\u30c9\u3067\u4f7f\u7528\u3059\u308b\u95a2\u6570\u306e\u5b9f\u88c5\u307e\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c # \u3042\u308a\u307e\u3057\u305f\u304c\u3001CUDA 5.0\u4ee5\u964d\u3067\u306f\u3001\u30c7\u30d0\u30a4\u30b9\u30b3\u30fc\u30c9\u3067\u4f7f\u7528\u3059\u308b\u95a2\u6570\u306e\u5ba3\u8a00\u306e\u307f\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u3060\u3051\u3067 # \u5341\u5206\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # \u3053\u306e\u3053\u3068\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u3068\u30ea\u30f3\u30ab\u30fc\u306b\u4f1d\u3048\u308b\u305f\u3081\u306b\u3001CUDA_SEPARABLE_COMPILATION\u30d7\u30ed\u30d1\u30c6\u30a3\u3092ON\u306b # \u3057\u3066\u3044\u307e\u3059\u3002 # \u305f\u3060\u3057\u3001\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u306e\u307fON\u306b\u8a2d\u5b9a\u3057\u3066\u4e0b\u3055\u3044\u3002 # \u8a73\u3057\u304f\u306f\u53c2\u8003\u6587\u732e1\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 set_property(TARGET my_program PROPERTY CUDA_SEPARABLE_COMPILATION ON)","title":"CMake\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210"},{"location":"blog/thrust-async/#thrust_2","text":"\u3044\u3088\u3044\u3088\u672c\u984c\u3067\u3059\u3002","title":"Thrust\u306e\u975e\u540c\u671f\u5b9f\u884c\u306e\u66f8\u304d\u65b9"},{"location":"blog/thrust-async/#eventfuture","text":"Thrust\u306b\u306f event \u3068 future \u304c\u3042\u308a\u307e\u3059\u3002 future \u306f reduce \u304b\u3089\u8fd4\u3055\u308c\u3001\u305d\u306e\u4ed6\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f event \u3092\u8fd4\u3057\u307e\u3059\u3002 \u3069\u3061\u3089\u3082 wait() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u975e\u540c\u671f\u5b9f\u884c\u304c\u7d42\u308f\u308b\u307e\u3067\u5f85\u3061\u307e\u3059\u3002 future \u306f\u3055\u3089\u306b get() \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3061\u3001\u5b9f\u884c\u7d50\u679c\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u65b9\u306f\u53c2\u8003\u6587\u732e2\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002 event \u306f unique_eager_event \u30af\u30e9\u30b9\u306b, future \u306f unique_eager_future \u30af\u30e9\u30b9\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002 \u30d8\u30c3\u30c0\u30fc\u306f\u305d\u308c\u305e\u308cthrust/event.h, thrust/future.h\u3067\u3059\u3002 \u4eca\u56de\u306f\u8a08\u7b97\u7d50\u679c\u3092 host_vector \u306b\u683c\u7d0d\u3059\u308b\u306e\u3067\u3001\u4f7f\u3046\u306e\u306f\u5b9f\u884c\u304c\u5b8c\u4e86\u3057\u305f\u304b\u78ba\u8a8d\u3059\u308b\u3060\u3051\u306e event \u3067\u3059\u3002 double.h #include <thrust/event.h> #include <thrust/host_vector.h> thrust::device_event Double(thrust::host_vector<float>& doubles, thrust::host_vector<int>& ints); \u3053\u3053\u3067 device_event \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u30db\u30b9\u30c8\u3067\u3082\u4f7f\u3048\u307e\u3059\u3002 host_event \u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u5f8c\u306e\u300c\u6b20\u70b9\u300d\u306e\u7bc0\u3067\u3053\u306e\u3053\u3068\u306b\u89e6\u308c\u307e\u3059\u3002 __global__ \u306f\u3042\u3063\u3066\u3082\u306a\u304f\u3066\u3082\u3044\u3044\u3067\u3059\u3002","title":"event\u3068future"},{"location":"blog/thrust-async/#_2","text":"Thrust\u306b\u306f copy \u3084 transform \u3068\u3044\u3063\u305f\u3001STL\u306e\u3088\u3046\u306a\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u3089\u3092\u975e\u540c\u671f\u306b\u5b9f\u884c\u3057\u305f\u3044\u5834\u5408\u306f\u3001 async \u540d\u524d\u7a7a\u9593\u306e\u3082\u306e\u3092\u4f7f\u3048\u3070\u3044\u3044\u3067\u3059\u3002 \u4f8b\u3048\u3070\u3001 thrust::copy \u306e\u975e\u540c\u671f\u7248\u306f thrust::async::copy \u3067\u3059\u3002 \u5b9f\u884c\u30dd\u30ea\u30b7\u30fc\u3068\u306f\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u30db\u30b9\u30c8\u3067\u5b9f\u884c\u3059\u308b\u306e\u304b\u3001\u30c7\u30d0\u30a4\u30b9\u3067\u5b9f\u884c\u3059\u308b\u306e\u304b\u3001\u305d\u308c\u3068\u3082\u9010\u6b21\u7684\u306b\u51e6\u7406\u3059\u308b\u306e\u304b\u3092\u6307\u5b9a\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002 \u30af\u30e9\u30b9\u540d\u306f\u305d\u308c\u305e\u308c host \u3001 device \u3001 seq \u3067\u3059\u3002 \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u7121\u99c4\u306a\u30c7\u30fc\u30bf\u306e\u30b3\u30d4\u30fc\u3092\u6e1b\u3089\u305b\u307e\u3059\u3002 \u5b9f\u88c5\u306f\u30bf\u30b0\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3067\u3001\u81ea\u5206\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002 \u8a73\u3057\u304f\u306f\u53c2\u8003\u6587\u732e3\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002 \u5b9f\u884c\u30dd\u30ea\u30b7\u30fc\u81ea\u4f53\u306f\u540c\u671f\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u5bfe\u3057\u3066\u3082\u4f7f\u3048\u307e\u3059\u304c\u3001\u975e\u540c\u671f\u306a\u3089 host \u3068 device \u306e after \u30e1\u30f3\u30d0\u95a2\u6570\u306b event \u3068 future \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5b9f\u884c\u9806\u5e8f\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 event \u3068 future \u306e\u500b\u6570\u306f\u4f55\u500b\u3067\u3082\u3044\u3044\u3067\u3059\u3002 \u307e\u305f\u3001 thrust::when_all \u95a2\u6570\u3067\u8907\u6570\u306e event \u3068 future \u3092\u4e00\u3064\u306e event \u306b\u307e\u3068\u3081\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u3089\u3092\u8e0f\u307e\u3048\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002 double.cu #include <thrust/async/copy.h> #include <thrust/async/transform.h> #include <thrust/device_vector.h> #include \"double.h\" template <class T> thrust::device_event Double(thrust::host_vector<T>& ts) { // \u30c7\u30d0\u30a4\u30b9\u5074\u306e\u914d\u5217\u3092\u7528\u610f auto device_ts = thrust::device_vector<T>(); // \u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u521d\u671f\u5316 device_ts.resize(ts.size()); // \u30db\u30b9\u30c8\u304b\u3089\u30c7\u30d0\u30a4\u30b9\u3078\u306e\u975e\u540c\u671f\u30b3\u30d4\u30fc auto copy_ts_event = thrust::async::copy( thrust::host, thrust::device, ts.begin(), ts.end(), device_ts.begin() ); // \u30c7\u30d0\u30a4\u30b9\u5074\u3067\u306e\u8a08\u7b97 auto double_ts_event = thrust::async::transform( thrust::device.after(copy_ts_event), device_ts.begin(), device_ts.end(), device_ts.begin(), [] __device__(T d) { return d * d; } ); // \u30c7\u30d0\u30a4\u30b9\u304b\u3089\u30db\u30b9\u30c8\u3078\u306e\u975e\u540c\u671f\u30b3\u30d4\u30fc auto copy_back_ts_event = thrust::async::copy( thrust::device.after(double_ts_event), device_ts.begin(), device_ts.end(), ts.begin() ); return copy_back_ts_event; } thrust::device_event Double(thrust::host_vector<float>& floats, thrust::host_vector<int>& ints) { // \u975e\u540c\u671f\u5b9f\u884c\u306e\u5b8c\u4e86\u3092\u307e\u3068\u3081\u308b return thrust::when_all(Double(floats), Double(ints)); } int \u3068 float \u306e\u914d\u5217\u306e\u305d\u308c\u305e\u308c\u306b\u5bfe\u3057\u3066\u3001\u30c7\u30d0\u30a4\u30b9\u3078\u306e\u30b3\u30d4\u30fc\u304c\u5b8c\u4e86\u3057\u305f\u3089\u30012\u4e57\u3059\u308b\u8a08\u7b97\u3092\u884c\u3044\u3001\u7d42\u308f\u308c\u3070\u30db\u30b9\u30c8\u3078\u30b3\u30d4\u30fc\u3059\u308b\u51e6\u7406\u3092\u9806\u756a\u306b\u5b9f\u884c\u30dd\u30ea\u30b7\u30fc\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002 \u6700\u5f8c\u306b\u3001\u4e21\u65b9\u306e\u914d\u5217\u304c\u30db\u30b9\u30c8\u3078\u30b3\u30d4\u30fc\u3055\u308c\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e event \u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002 \u3042\u3068\u306f\u3001 main \u95a2\u6570\u3067\u5404\u914d\u5217\u3092\u4f5c\u3063\u3066\u3001 Double \u95a2\u6570\u306b\u6e21\u3057\u3066\u3001\u7d50\u679c\u304c\u6b63\u3057\u3044\u304b\u78ba\u8a8d\u3059\u308b\u3060\u3051\u3067\u3059\u3002 main.cpp #include \"double.h\" #include <cassert> #include <cmath> #include <iostream> int main() { auto floats = thrust::host_vector<float>(); auto ints = thrust::host_vector<int>(); std::size_t size = 10000; floats.reserve(size); ints.reserve(size); for (std::size_t i = 0; i < size; ++i) { floats.push_back(i); ints.push_back(i); } auto event = Double(floats, ints); event.wait(); for (std::size_t i = 0; i < size; ++i) { assert(std::abs(floats[i] - i * i) < 1e-5); assert(ints[i] == static_cast<int>(i * i)); } std::cout << \"Success!\\n\"; return 0; } \u672c\u5f53\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5024\u306e\u6bd4\u8f03\u3092\u3082\u3046\u5c11\u3057\u4e01\u5be7\u306b\u3059\u308b\u3079\u304d\u3067\u3059\u304c\u3001\u672c\u984c\u3068\u95a2\u4fc2\u306a\u3044\u306e\u3067\u826f\u3057\u3068\u3057\u307e\u3059\u3002","title":"\u975e\u540c\u671f\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u5b9f\u884c\u30dd\u30ea\u30b7\u30fc"},{"location":"blog/thrust-async/#_3","text":"\u4e00\u822c\u306b\u975e\u540c\u671f\u5b9f\u884c\u3068\u3044\u3046\u3068\u8eab\u69cb\u3048\u308b\u65b9\u304c\u591a\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u304c\u3001\u4e0a\u306e\u89e3\u8aac\u3092\u898b\u308b\u3068\u610f\u5916\u3068\u7c21\u5358\u306b\u3067\u304d\u308b\u3068\u601d\u308f\u308c\u305f\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002 \u307e\u305f\u3001\u5b9f\u884c\u30dd\u30ea\u30b7\u30fc\u3067\u5b9f\u884c\u9806\u5e8f\u3092\u6307\u5b9a\u3067\u304d\u308b\u306e\u3082\u9b45\u529b\u7684\u3067\u3059\u3002 \u975e\u540c\u671f\u51e6\u7406\u306e\u5229\u70b9\u3068\u3044\u3046\u3088\u308aThrust\u3092\u4f7f\u3046\u5229\u70b9\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u5b9f\u306frocThrust\u3068\u3044\u3046\u3001CUDA\u3092HIP\u3068ROCm\u306b\u7f6e\u304d\u63db\u3048\u305fThrust\u3092AMD\u304c\u958b\u767a\u3057\u3066\u3044\u307e\u3059\u3002 \u73fe\u6642\u70b9\u3067\u306f\u3001Thrust 1.17.2\u307e\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u975e\u540c\u671f\u5b9f\u884c\u3082\u3067\u304d\u307e\u3059\u3002 \u8a73\u3057\u304f\u306f\u53c2\u8003\u6587\u732e4\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002","title":"\u5229\u70b9"},{"location":"blog/thrust-async/#_4","text":"\u6b8b\u5ff5\u306a\u304c\u3089\u6b20\u70b9\u304c\u3042\u308a\u307e\u3059\u3002 1\u3064\u76ee\u306e\u6b20\u70b9\u306fCUDA\u304c\u30c7\u30d0\u30a4\u30b9\u306e\u6642\u304b\u3064\u30c7\u30d0\u30a4\u30b9\u5074\u3067\u3057\u304b\u4f7f\u3048\u306a\u3044\u3053\u3068\u3067\u3059\u3002 Thrust\u306foneTBB\u3092\u30c7\u30d0\u30a4\u30b9\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u975e\u540c\u671f\u51e6\u7406\u306foneTBB\u3067\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u30b7\u30ea\u30a2\u30eb\u3084OpenMP\u3082\u540c\u69d8\u3067\u3059\u3002 \u300cevent\u3068future\u300d\u7bc0\u3067\u89e6\u308c\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u304c host_event \u304c\u306a\u3044\u7406\u7531\u3060\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002 \u3057\u304b\u3057\u3001\u3053\u306e\u6b20\u70b9\u306f\u3055\u307b\u3069\u554f\u984c\u306b\u306a\u3089\u306a\u3044\u3067\u3057\u3087\u3046\u3002 2\u3064\u76ee\u306e\u6b20\u70b9\u306f async::copy \u304c\u8ee2\u9001\u3059\u308b\u30c7\u30fc\u30bf\u306e\u578b\u306b\u5bfe\u3057\u3066 trivially relocatable \u3067\u3042\u308b\u3053\u3068\u3092\u8981\u6c42\u3057\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002 trivially relocatable\u306a\u578b\u3068\u306f\u3001\u7c21\u5358\u306b\u8a00\u3046\u3068\u30b3\u30d4\u30fc\u3068\u30e0\u30fc\u30d6\u3001\u7834\u68c4\u304c default \u3067\u51fa\u6765\u3066\u3001\u4eee\u60f3\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u4eee\u60f3\u7d99\u627f\u3092\u6301\u305f\u305a\u3001\u5168\u3066\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3068\u57fa\u5e95\u30af\u30e9\u30b9\u3082trivially relocatable\u306a\u578b\u3067\u3059\u3002 \u3053\u308c\u306f memcpy \u3067\u30db\u30b9\u30c8\u3068\u30c7\u30d0\u30a4\u30b9\u9593\u3067\u30c7\u30fc\u30bf\u8ee2\u9001\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u5c0e\u5165\u3055\u308c\u307e\u3057\u305f\u3002 Thrust\u3067\u306f\u3001 THRUST_PROCLAIM_TRIVIALLY_RELOCATABLE \u30de\u30af\u30ed\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\u4e0e\u3048\u305f\u578b\u304ctrivially relocatable\u3067\u3042\u308b\u3068\u5ba3\u8a00\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u5236\u7d04\u304c\u5f37\u3044\u3082\u306e\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306f\u5411\u4e0a\u3057\u3001 \u79c1\u304c\u884c\u3063\u305f\u5b9f\u9a13 \u3067\u306f\u305d\u3046\u3067\u306a\u3044\u3082\u306e\u306b\u6bd4\u3079\u3066\u5b9f\u884c\u6642\u9593\u304c\u7d0430%\u6e1b\u3063\u3066\u3044\u307e\u3059\u3002 \u8a73\u3057\u304f\u306f\u53c2\u8003\u6587\u732e5\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002","title":"\u6b20\u70b9"},{"location":"blog/thrust-async/#_5","text":"Thrust\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u3054\u89a7\u306b\u306a\u308b\u3068\u308f\u304b\u308b\u306e\u3067\u3059\u304c\u3001\u306a\u3093\u3068\u30a2\u30fc\u30ab\u30a4\u30d6\u306b\u3055\u308c\u3066\u307e\u3059\u3002 \u3069\u3046\u3084\u3089\u534a\u5e74\u524d\u304b\u3089 CCCL \u3068\u3044\u3046\u3001CUB\u3068libcudacxx\u3082\u4e00\u7dd2\u306b\u3057\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u79fb\u3063\u305f\u3088\u3046\u3067\u3059\u3002 \u3053\u306e\u3053\u3068\u306b\u6c17\u3065\u3044\u305f\u306e\u304c\u4e00\u6628\u65e5\u3060\u3063\u305f\u306e\u3067\u3001\u6628\u65e5CCCL\u3067\u3082\u30d3\u30eb\u30c9\u3067\u304d\u308b\u304b\u8a66\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u4e0a\u8ff0\u306e\u3084\u308a\u65b9\u3067\u306f\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002 \u3069\u3046\u306b\u304b\u89e3\u6c7a\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u6642\u9593\u3082\u306a\u304b\u3063\u305f\u306e\u3067\u3068\u308a\u3042\u3048\u305aThrust\u306b\u5bfe\u3057\u3066\u66f8\u304d\u307e\u3057\u305f\u3002 \u3082\u3057\u3054\u5b58\u3058\u306e\u65b9\u304c\u3044\u3089\u3063\u3057\u3083\u3063\u305f\u3089\u3001\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002","title":"\u5b9f\u306f..."},{"location":"blog/thrust-async/#_6","text":"\u30c7\u30fc\u30bf\u304ctrivially relocatable\u306a\u578b\u306a\u3089\u3001\u304a\u624b\u8efd\u306b\u975e\u540c\u671f\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002","title":"\u307e\u3068\u3081"},{"location":"blog/thrust-async/#_7","text":"GitHub \u306b\u7f6e\u3044\u3066\u3044\u307e\u3059\u3002","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"blog/thrust-async/#_8","text":"https://developer.nvidia.com/blog/separate-compilation-linking-cuda-device-code/ https://github.com/NVIDIA/thrust/blob/main/thrust/system/cuda/detail/future.inl https://github.com/NVIDIA/thrust/blob/main/thrust/execution_policy.h https://github.com/ROCmSoftwarePlatform/rocThrust https://github.com/NVIDIA/thrust/releases/tag/1.9.4","title":"\u53c2\u8003\u6587\u732e"},{"location":"blog/thrust/","text":"Thrust \u3092\u4f7f\u3046\u6a5f\u4f1a\u304c\u3042\u3063\u305f\u306e\u3067\u3001 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3092\u7c21\u5358\u306b\u7ffb\u8a33\u3059\u308b\u3002 \u7d39\u4ecb Thrust\u3068\u306fSTL\u306b\u57fa\u3065\u3044\u305f\u3001CUDA\u306e\u305f\u3081\u306eC++\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b\u3002 Thrust\u306b\u3088\u3063\u3066\u3001CUDA C\u3068\u5b8c\u5168\u306a\u4e92\u63db\u6027\u304c\u3042\u308b\u9ad8\u6c34\u6e96\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u901a\u3057\u3066\u3001\u6700\u5c0f\u9650\u306e\u52b4\u529b\u3067\u9ad8\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306a\u4e26\u5217\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb CUDA\u30c4\u30fc\u30eb\u30ad\u30c3\u30c8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3068\u3001Thrust\u306e\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3082\u6a19\u6e96\u306eCUDA\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30b3\u30d4\u30fc\u3055\u308c\u308b\u3002 Thrust\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u306e\u3067\u3001\u3053\u308c\u4ee5\u4e0a\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u3002 Vectors Thrust\u306f2\u3064\u306evector\u30b3\u30f3\u30c6\u30ca\u3001 host_vector \u3068 device_vector \u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002 \u540d\u524d\u304c\u793a\u3059\u3088\u3046\u306b\u3001 device_vector \u306fGPU\u306e\u30e1\u30e2\u30ea\u306b\u3042\u308b\u4e00\u65b9\u3067\u3001 host_vector \u306f\u30db\u30b9\u30c8\u30e1\u30e2\u30ea\u306b\u4fdd\u5b58\u3055\u308c\u308b\u3002 Thrust\u306evector\u30b3\u30f3\u30c6\u30ca\u306f std::vector \u306b\u4f3c\u3066\u3044\u308b\u3002 std::vector \u306e\u3088\u3046\u306b\u3001 host_vector \u3068 device_vector \u306f\u52d5\u7684\u306b\u30b5\u30a4\u30ba\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30b3\u30f3\u30c6\u30ca(\u4efb\u610f\u306e\u30c7\u30fc\u30bf\u578b\u3092\u6301\u3066\u308b)\u3067\u3042\u308b\u3002 \u4ee5\u4e0b\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fThrust\u306evector\u30b3\u30f3\u30c6\u30ca\u306e\u4f7f\u3044\u65b9\u3092\u793a\u3059\u3002 #include <thrust/host_vector.h> #include <thrust/device_vector.h> #include <iostream> int main(void) { // H has storage for 4 integers thrust::host_vector<int> H(4); // initialize individual elements H[0] = 14; H[1] = 20; H[2] = 38; H[3] = 46; // H.size() returns the size of vector H std::cout << \"H has size \" << H.size() << std::endl; // print contents of H for(int i = 0; i < H.size(); i++) std::cout << \"H[\" << i << \"] = \" << H[i] << std::endl; // resize H H.resize(2); std::cout << \"H now has size \" << H.size() << std::endl; // Copy host_vector H to device_vector D thrust::device_vector<int> D = H; // elements of D can be modified D[0] = 99; D[1] = 88; // print contents of D for(int i = 0; i < D.size(); i++) std::cout << \"D[\" << i << \"] = \" << D[i] << std::endl; // H and D are automatically deleted when the function returns return 0; } \u3053\u306e\u4f8b\u304c\u793a\u3059\u3088\u3046\u306b\u3001 = \u6f14\u7b97\u5b50\u306f host_vector \u304b\u3089 device_vector \u3078\u30b3\u30d4\u30fc\u3059\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u308b(\u9006\u3082\u540c\u69d8)\u3002 \u3082\u3061\u308d\u3093\u3001 host_vector \u540c\u58eb\u3084 device_vector \u540c\u58eb\u3067\u30b3\u30d4\u30fc\u3059\u308b\u305f\u3081\u306b\u3082\u4f7f\u308f\u308c\u308b\u3002 \u307e\u305f\u3001 device_vector \u306e\u500b\u3005\u306e\u8981\u7d20\u306f\u5927\u304b\u3063\u3053\u3092\u4f7f\u3063\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u304c\u3001\u5404\u30a2\u30af\u30bb\u30b9\u306f cudaMemcpy \u3092\u547c\u3073\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u51fa\u6765\u308b\u9650\u308a\u4f7f\u308f\u306a\u3044\u65b9\u304c\u826f\u3044\u3002 \u7279\u5b9a\u306e\u5024\u3067vector\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u521d\u671f\u5316\u3057\u305f\u308a\u3001\u3042\u308bvector\u306e\u3042\u308b\u5024\u306e\u96c6\u5408\u3092\u5225\u306evector\u306b\u30b3\u30d4\u30fc\u3060\u3051\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u4fbf\u5229\u306a\u3053\u3068\u304c\u591a\u3044\u3002 Thrust\u306f\u3053\u308c\u3089\u306e\u64cd\u4f5c\u3092\u884c\u3046\u3044\u304f\u3064\u304b\u306e\u65b9\u6cd5\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002 #include <thrust/host_vector.h> #include <thrust/device_vector.h> #include <thrust/copy.h> #include <thrust/fill.h> #include <thrust/sequence.h> #include <iostream> int main(void) { // initialize all ten integers of a device_vector to 1 thrust::device_vector<int> D(10, 1); // set the first seven elements of a vector to 9 thrust::fill(D.begin(), D.begin() + 7, 9); // initialize a host_vector with the first five elements of D thrust::host_vector<int> H(D.begin(), D.begin() + 5); // set the elements of H to 0, 1, 2, 3, ... thrust::sequence(H.begin(), H.end()); // copy all of H back to the beginning of D thrust::copy(H.begin(), H.end(), D.begin()); // print D for(int i = 0; i < D.size(); i++) std::cout << \"D[\" << i << \"] = \" << D[i] << std::endl; return 0; } copy \u95a2\u6570\u306f\u30db\u30b9\u30c8\u304b\u30c7\u30d0\u30a4\u30b9\u306e\u8981\u7d20\u306e\u7bc4\u56f2\u3092\u5225\u306e\u30db\u30b9\u30c8\u304b\u30c7\u30d0\u30a4\u30b9\u306evector\u306b\u30b3\u30d4\u30fc\u3059\u308b\u3002 thrust::fill \u95a2\u6570\u306f\u5358\u306b\u7bc4\u56f2\u5185\u306e\u8981\u7d20\u306b\u7279\u5b9a\u306e\u5024\u3092\u5165\u308c\u308b\u3002 sequence \u95a2\u6570\u306f\u7b49\u9593\u9694\u306e\u5024\u306e\u5217\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002 2.1 Thrust\u306e\u540d\u524d\u7a7a\u9593 Thrust\u306e\u540d\u524d\u7a7a\u9593\u306f thrust \u3002 2.2 \u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u9759\u7684\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1 \u751f\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3092Thrust\u306e\u95a2\u6570\u306b\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u308b\u3002 \u305f\u3060\u3057\u3001\u30c7\u30d0\u30a4\u30b9\u30e1\u30e2\u30ea\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u306f thrust::device_ptr \u3067\u5305\u307e\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002 \u4f8b\u3048\u3070\u3001 size_t N = 10; // raw pointer to device memory int * raw_ptr; cudaMalloc((void **) &raw_ptr, N * sizeof(int)); // wrap raw pointer with a device_ptr thrust::device_ptr<int> dev_ptr(raw_ptr); // use device_ptr in thrust algorithms thrust::fill(dev_ptr, dev_ptr + N, (int) 0); device_ptr \u304b\u3089\u751f\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f\u3001 raw_pointer_cast \u3092\u4f7f\u3046\u3079\u304d\u3060\u3002 size_t N = 10; // create a device_ptr thrust::device_ptr<int> dev_ptr = thrust::device_malloc<int>(N); // extract raw pointer from device_ptr int * raw_ptr = thrust::raw_pointer_cast(dev_ptr); \u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u30dd\u30a4\u30f3\u30bf\u3092\u533a\u5225\u3059\u308b\u3082\u3046\u4e00\u3064\u306e\u7406\u7531\u306f\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u591a\u304f\u306e\u7a2e\u985e\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u6a2a\u65ad\u3059\u308b\u305f\u3081\u306b\u4f7f\u3048\u308b\u304b\u3089\u3067\u3042\u308b\u3002 \u4f8b\u3048\u3070\u3001STL\u306f\u53cc\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u63d0\u4f9b\u3059\u308b\u30ea\u30f3\u30af\u30ea\u30b9\u30c8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002 Thrust\u306f\u305d\u306e\u3088\u3046\u306a\u30b3\u30f3\u30c6\u30ca\u306e\u30c7\u30d0\u30a4\u30b9\u306e\u5b9f\u88c5\u306f\u63d0\u4f9b\u3057\u3066\u3044\u306a\u3044\u304c\u3001\u305d\u308c\u3089\u3068\u4e92\u63db\u6027\u304c\u3042\u308b\u3002 #include <thrust/device_vector.h> #include <thrust/copy.h> #include <list> #include <vector> int main(void) { // create an STL list with 4 values std::list<int> stl_list; stl_list.push_back(10); stl_list.push_back(20); stl_list.push_back(30); stl_list.push_back(40); // initialize a device_vector with the list thrust::device_vector<int> D(stl_list.begin(), stl_list.end()); // copy a device_vector into an STL vector std::vector<int> stl_vector(D.size()); thrust::copy(D.begin(), D.end(), stl_vector.begin()); return 0; } Thrust\u306f counting_iterator \u3084 zip_iterator \u3068\u3044\u3063\u305f\u3001\u88c5\u98fe\u7684\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u96c6\u307e\u308a\u3082\u63d0\u4f9b\u3059\u308b\u3002 3. \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 Thrust\u306f\u305f\u304f\u3055\u3093\u306e\u3042\u308a\u3075\u308c\u305f\u4e26\u5217\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002 \u3053\u308c\u3089\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u591a\u304f\u306fSTL\u306e\u76f4\u63a5\u7684\u306a\u985e\u4f3c\u3092\u6301\u3061\u3001\u540c\u3058STL\u95a2\u6570\u304c\u5b58\u5728\u3059\u308b\u6642\u306f\u540c\u3058\u540d\u524d\u3092\u4f7f\u3046(\u4f8b: thrust::sort \u3068 std::sort )\u3002 Thrust\u306e\u5168\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u30db\u30b9\u30c8\u3068\u30c7\u30d0\u30a4\u30b9\u306e\u4e21\u65b9\u306b\u5bfe\u3059\u308b\u5b9f\u88c5\u3092\u6301\u3064\u3002 \u7279\u306b\u3001Thrust\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u30db\u30b9\u30c8\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u4e00\u7dd2\u306b\u547c\u3073\u51fa\u3055\u308c\u305f\u6642\u3001\u30db\u30b9\u30c8\u30d1\u30b9\u304c\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3055\u308c\u308b\u3002 \u540c\u69d8\u306b\u3001\u30c7\u30d0\u30a4\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7bc4\u56f2\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u6642\u3001\u30c7\u30d0\u30a4\u30b9\u306e\u5b9f\u88c5\u304c\u547c\u3070\u308c\u308b\u3002 \u30db\u30b9\u30c8\u3068\u30c7\u30d0\u30a4\u30b9\u9593\u3067\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3067\u304d\u308b thrust::copy \u3068\u3044\u3046\u4f8b\u5916\u306f\u3042\u308b\u304c\u3001Thrust\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3078\u306e\u5168\u3066\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5f15\u6570\u306f\u540c\u3058\u5834\u6240(\u5168\u3066\u30db\u30b9\u30c8\u4e0a\u304b\u5168\u3066\u30c7\u30d0\u30a4\u30b9\u4e0a)\u306b\u3042\u308b\u3079\u304d\u3060\u3002 \u3053\u306e\u8981\u4ef6\u3092\u7834\u3063\u305f\u6642\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u4f5c\u3089\u308c\u308b\u3002 3.1 \u5909\u5f62 \u5b8c\u5168\u306a\u30ea\u30b9\u30c8\u306f \u3053\u3053 \u3002 \u4ee5\u4e0b\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3044\u304f\u3064\u304b\u306e\u5909\u5f62\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u793a\u3057\u3066\u3044\u308b\u3002 thrust::negate \u3084 thrust::modulus \u306a\u3069\u306e\u3042\u308a\u3075\u308c\u305ffunctor\u306f thrust/functional.h \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002 #include <thrust/device_vector.h> #include <thrust/transform.h> #include <thrust/sequence.h> #include <thrust/copy.h> #include <thrust/fill.h> #include <thrust/replace.h> #include <thrust/functional.h> #include <iostream> int main(void) { // allocate three device_vectors with 10 elements thrust::device_vector<int> X(10); thrust::device_vector<int> Y(10); thrust::device_vector<int> Z(10); // initialize X to 0,1,2,3, .... thrust::sequence(X.begin(), X.end()); // compute Y = -X thrust::transform(X.begin(), X.end(), Y.begin(), thrust::negate<int>()); // fill Z with twos thrust::fill(Z.begin(), Z.end(), 2); // compute Y = X mod 2 thrust::transform(X.begin(), X.end(), Z.begin(), Y.begin(), thrust::modulus<int>()); // replace all the ones in Y with tens thrust::replace(Y.begin(), Y.end(), 1, 10); // print Y thrust::copy(Y.begin(), Y.end(), std::ostream_iterator<int>(std::cout, \"\\n\")); return 0; } SAXPY\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u3042\u308b\u304c\u3001\u7701\u7565\u3002 functor\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f5c\u6210\u3067\u304d\u308b\u3002 struct saxpy_functor { const float a; saxpy_functor(float _a) : a(_a) {} __host__ __device__ float operator()(const float& x, const float& y) const { return a * x + y; } }; \u8907\u96d1\u306a\u8a08\u7b97\u306f\u3001\u7c21\u5358\u306a\u8a08\u7b97\u306b\u5206\u89e3\u3057\u3066\u4f55\u56de\u304b\u306b\u5206\u3051\u3066\u5168\u4f53\u3092\u8a08\u7b97\u3059\u308b\u3088\u308a\u3001\u8907\u96d1\u306a\u8a08\u7b97\u30921\u56de\u3067\u307e\u3068\u3081\u3066\u5168\u4f53\u3092\u8a08\u7b97\u3059\u308b\u307b\u3046\u304c\u65e9\u3044\u3002 \u4f8b\u3048\u3070\u3001\u914d\u5217 a , b , x \u306b\u5bfe\u3057\u3066\u3001 a * x + b \u3092\u8a08\u7b97\u3059\u308b\u306a\u3089\u3001 a * x \u3092\u8a08\u7b97\u3057\u3066 b \u3092\u8db3\u3059\u3088\u308a a[i] * x[i] + b[i] \u3092\u8a08\u7b97\u3059\u308b\u307b\u3046\u304c\u65e9\u3044\u3002 thrust::transform \u306f1\u3064\u304b2\u3064\u306e\u5165\u529b\u5f15\u6570\u3057\u304b\u6301\u305f\u306a\u3044\u304c\u3001 \u3053\u306e\u4f8b \u3092\u4f7f\u3046\u30682\u3064\u3088\u308a\u591a\u3044\u5165\u529b\u3067\u30821\u56de\u3067\u51fa\u6765\u308b\u3002 3.2 Reductions \u7279\u306b\u6c17\u3092\u4ed8\u3051\u308b\u3053\u3068\u306f\u306a\u3044\u3002 \u8a73\u7d30\u306f \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3092\u53c2\u7167\u3002 3.3 Prefix-Sums","title":"Thrust\u306e\u4f7f\u3044\u65b9"},{"location":"blog/thrust/#_1","text":"Thrust\u3068\u306fSTL\u306b\u57fa\u3065\u3044\u305f\u3001CUDA\u306e\u305f\u3081\u306eC++\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b\u3002 Thrust\u306b\u3088\u3063\u3066\u3001CUDA C\u3068\u5b8c\u5168\u306a\u4e92\u63db\u6027\u304c\u3042\u308b\u9ad8\u6c34\u6e96\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u901a\u3057\u3066\u3001\u6700\u5c0f\u9650\u306e\u52b4\u529b\u3067\u9ad8\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306a\u4e26\u5217\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002","title":"\u7d39\u4ecb"},{"location":"blog/thrust/#_2","text":"CUDA\u30c4\u30fc\u30eb\u30ad\u30c3\u30c8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3068\u3001Thrust\u306e\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3082\u6a19\u6e96\u306eCUDA\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30b3\u30d4\u30fc\u3055\u308c\u308b\u3002 Thrust\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u306e\u3067\u3001\u3053\u308c\u4ee5\u4e0a\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u3002","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"blog/thrust/#vectors","text":"Thrust\u306f2\u3064\u306evector\u30b3\u30f3\u30c6\u30ca\u3001 host_vector \u3068 device_vector \u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002 \u540d\u524d\u304c\u793a\u3059\u3088\u3046\u306b\u3001 device_vector \u306fGPU\u306e\u30e1\u30e2\u30ea\u306b\u3042\u308b\u4e00\u65b9\u3067\u3001 host_vector \u306f\u30db\u30b9\u30c8\u30e1\u30e2\u30ea\u306b\u4fdd\u5b58\u3055\u308c\u308b\u3002 Thrust\u306evector\u30b3\u30f3\u30c6\u30ca\u306f std::vector \u306b\u4f3c\u3066\u3044\u308b\u3002 std::vector \u306e\u3088\u3046\u306b\u3001 host_vector \u3068 device_vector \u306f\u52d5\u7684\u306b\u30b5\u30a4\u30ba\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30b3\u30f3\u30c6\u30ca(\u4efb\u610f\u306e\u30c7\u30fc\u30bf\u578b\u3092\u6301\u3066\u308b)\u3067\u3042\u308b\u3002 \u4ee5\u4e0b\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fThrust\u306evector\u30b3\u30f3\u30c6\u30ca\u306e\u4f7f\u3044\u65b9\u3092\u793a\u3059\u3002 #include <thrust/host_vector.h> #include <thrust/device_vector.h> #include <iostream> int main(void) { // H has storage for 4 integers thrust::host_vector<int> H(4); // initialize individual elements H[0] = 14; H[1] = 20; H[2] = 38; H[3] = 46; // H.size() returns the size of vector H std::cout << \"H has size \" << H.size() << std::endl; // print contents of H for(int i = 0; i < H.size(); i++) std::cout << \"H[\" << i << \"] = \" << H[i] << std::endl; // resize H H.resize(2); std::cout << \"H now has size \" << H.size() << std::endl; // Copy host_vector H to device_vector D thrust::device_vector<int> D = H; // elements of D can be modified D[0] = 99; D[1] = 88; // print contents of D for(int i = 0; i < D.size(); i++) std::cout << \"D[\" << i << \"] = \" << D[i] << std::endl; // H and D are automatically deleted when the function returns return 0; } \u3053\u306e\u4f8b\u304c\u793a\u3059\u3088\u3046\u306b\u3001 = \u6f14\u7b97\u5b50\u306f host_vector \u304b\u3089 device_vector \u3078\u30b3\u30d4\u30fc\u3059\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u308b(\u9006\u3082\u540c\u69d8)\u3002 \u3082\u3061\u308d\u3093\u3001 host_vector \u540c\u58eb\u3084 device_vector \u540c\u58eb\u3067\u30b3\u30d4\u30fc\u3059\u308b\u305f\u3081\u306b\u3082\u4f7f\u308f\u308c\u308b\u3002 \u307e\u305f\u3001 device_vector \u306e\u500b\u3005\u306e\u8981\u7d20\u306f\u5927\u304b\u3063\u3053\u3092\u4f7f\u3063\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u304c\u3001\u5404\u30a2\u30af\u30bb\u30b9\u306f cudaMemcpy \u3092\u547c\u3073\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u51fa\u6765\u308b\u9650\u308a\u4f7f\u308f\u306a\u3044\u65b9\u304c\u826f\u3044\u3002 \u7279\u5b9a\u306e\u5024\u3067vector\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u521d\u671f\u5316\u3057\u305f\u308a\u3001\u3042\u308bvector\u306e\u3042\u308b\u5024\u306e\u96c6\u5408\u3092\u5225\u306evector\u306b\u30b3\u30d4\u30fc\u3060\u3051\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u4fbf\u5229\u306a\u3053\u3068\u304c\u591a\u3044\u3002 Thrust\u306f\u3053\u308c\u3089\u306e\u64cd\u4f5c\u3092\u884c\u3046\u3044\u304f\u3064\u304b\u306e\u65b9\u6cd5\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002 #include <thrust/host_vector.h> #include <thrust/device_vector.h> #include <thrust/copy.h> #include <thrust/fill.h> #include <thrust/sequence.h> #include <iostream> int main(void) { // initialize all ten integers of a device_vector to 1 thrust::device_vector<int> D(10, 1); // set the first seven elements of a vector to 9 thrust::fill(D.begin(), D.begin() + 7, 9); // initialize a host_vector with the first five elements of D thrust::host_vector<int> H(D.begin(), D.begin() + 5); // set the elements of H to 0, 1, 2, 3, ... thrust::sequence(H.begin(), H.end()); // copy all of H back to the beginning of D thrust::copy(H.begin(), H.end(), D.begin()); // print D for(int i = 0; i < D.size(); i++) std::cout << \"D[\" << i << \"] = \" << D[i] << std::endl; return 0; } copy \u95a2\u6570\u306f\u30db\u30b9\u30c8\u304b\u30c7\u30d0\u30a4\u30b9\u306e\u8981\u7d20\u306e\u7bc4\u56f2\u3092\u5225\u306e\u30db\u30b9\u30c8\u304b\u30c7\u30d0\u30a4\u30b9\u306evector\u306b\u30b3\u30d4\u30fc\u3059\u308b\u3002 thrust::fill \u95a2\u6570\u306f\u5358\u306b\u7bc4\u56f2\u5185\u306e\u8981\u7d20\u306b\u7279\u5b9a\u306e\u5024\u3092\u5165\u308c\u308b\u3002 sequence \u95a2\u6570\u306f\u7b49\u9593\u9694\u306e\u5024\u306e\u5217\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002","title":"Vectors"},{"location":"blog/thrust/#21-thrust","text":"Thrust\u306e\u540d\u524d\u7a7a\u9593\u306f thrust \u3002","title":"2.1 Thrust\u306e\u540d\u524d\u7a7a\u9593"},{"location":"blog/thrust/#22","text":"\u751f\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3092Thrust\u306e\u95a2\u6570\u306b\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u308b\u3002 \u305f\u3060\u3057\u3001\u30c7\u30d0\u30a4\u30b9\u30e1\u30e2\u30ea\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u306f thrust::device_ptr \u3067\u5305\u307e\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002 \u4f8b\u3048\u3070\u3001 size_t N = 10; // raw pointer to device memory int * raw_ptr; cudaMalloc((void **) &raw_ptr, N * sizeof(int)); // wrap raw pointer with a device_ptr thrust::device_ptr<int> dev_ptr(raw_ptr); // use device_ptr in thrust algorithms thrust::fill(dev_ptr, dev_ptr + N, (int) 0); device_ptr \u304b\u3089\u751f\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f\u3001 raw_pointer_cast \u3092\u4f7f\u3046\u3079\u304d\u3060\u3002 size_t N = 10; // create a device_ptr thrust::device_ptr<int> dev_ptr = thrust::device_malloc<int>(N); // extract raw pointer from device_ptr int * raw_ptr = thrust::raw_pointer_cast(dev_ptr); \u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u30dd\u30a4\u30f3\u30bf\u3092\u533a\u5225\u3059\u308b\u3082\u3046\u4e00\u3064\u306e\u7406\u7531\u306f\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u591a\u304f\u306e\u7a2e\u985e\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u6a2a\u65ad\u3059\u308b\u305f\u3081\u306b\u4f7f\u3048\u308b\u304b\u3089\u3067\u3042\u308b\u3002 \u4f8b\u3048\u3070\u3001STL\u306f\u53cc\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u63d0\u4f9b\u3059\u308b\u30ea\u30f3\u30af\u30ea\u30b9\u30c8\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002 Thrust\u306f\u305d\u306e\u3088\u3046\u306a\u30b3\u30f3\u30c6\u30ca\u306e\u30c7\u30d0\u30a4\u30b9\u306e\u5b9f\u88c5\u306f\u63d0\u4f9b\u3057\u3066\u3044\u306a\u3044\u304c\u3001\u305d\u308c\u3089\u3068\u4e92\u63db\u6027\u304c\u3042\u308b\u3002 #include <thrust/device_vector.h> #include <thrust/copy.h> #include <list> #include <vector> int main(void) { // create an STL list with 4 values std::list<int> stl_list; stl_list.push_back(10); stl_list.push_back(20); stl_list.push_back(30); stl_list.push_back(40); // initialize a device_vector with the list thrust::device_vector<int> D(stl_list.begin(), stl_list.end()); // copy a device_vector into an STL vector std::vector<int> stl_vector(D.size()); thrust::copy(D.begin(), D.end(), stl_vector.begin()); return 0; } Thrust\u306f counting_iterator \u3084 zip_iterator \u3068\u3044\u3063\u305f\u3001\u88c5\u98fe\u7684\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u96c6\u307e\u308a\u3082\u63d0\u4f9b\u3059\u308b\u3002","title":"2.2 \u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u9759\u7684\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1"},{"location":"blog/thrust/#3","text":"Thrust\u306f\u305f\u304f\u3055\u3093\u306e\u3042\u308a\u3075\u308c\u305f\u4e26\u5217\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002 \u3053\u308c\u3089\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u591a\u304f\u306fSTL\u306e\u76f4\u63a5\u7684\u306a\u985e\u4f3c\u3092\u6301\u3061\u3001\u540c\u3058STL\u95a2\u6570\u304c\u5b58\u5728\u3059\u308b\u6642\u306f\u540c\u3058\u540d\u524d\u3092\u4f7f\u3046(\u4f8b: thrust::sort \u3068 std::sort )\u3002 Thrust\u306e\u5168\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u30db\u30b9\u30c8\u3068\u30c7\u30d0\u30a4\u30b9\u306e\u4e21\u65b9\u306b\u5bfe\u3059\u308b\u5b9f\u88c5\u3092\u6301\u3064\u3002 \u7279\u306b\u3001Thrust\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u30db\u30b9\u30c8\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u4e00\u7dd2\u306b\u547c\u3073\u51fa\u3055\u308c\u305f\u6642\u3001\u30db\u30b9\u30c8\u30d1\u30b9\u304c\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3055\u308c\u308b\u3002 \u540c\u69d8\u306b\u3001\u30c7\u30d0\u30a4\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7bc4\u56f2\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u6642\u3001\u30c7\u30d0\u30a4\u30b9\u306e\u5b9f\u88c5\u304c\u547c\u3070\u308c\u308b\u3002 \u30db\u30b9\u30c8\u3068\u30c7\u30d0\u30a4\u30b9\u9593\u3067\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3067\u304d\u308b thrust::copy \u3068\u3044\u3046\u4f8b\u5916\u306f\u3042\u308b\u304c\u3001Thrust\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3078\u306e\u5168\u3066\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5f15\u6570\u306f\u540c\u3058\u5834\u6240(\u5168\u3066\u30db\u30b9\u30c8\u4e0a\u304b\u5168\u3066\u30c7\u30d0\u30a4\u30b9\u4e0a)\u306b\u3042\u308b\u3079\u304d\u3060\u3002 \u3053\u306e\u8981\u4ef6\u3092\u7834\u3063\u305f\u6642\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u4f5c\u3089\u308c\u308b\u3002","title":"3. \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"},{"location":"blog/thrust/#31","text":"\u5b8c\u5168\u306a\u30ea\u30b9\u30c8\u306f \u3053\u3053 \u3002 \u4ee5\u4e0b\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3044\u304f\u3064\u304b\u306e\u5909\u5f62\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u793a\u3057\u3066\u3044\u308b\u3002 thrust::negate \u3084 thrust::modulus \u306a\u3069\u306e\u3042\u308a\u3075\u308c\u305ffunctor\u306f thrust/functional.h \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002 #include <thrust/device_vector.h> #include <thrust/transform.h> #include <thrust/sequence.h> #include <thrust/copy.h> #include <thrust/fill.h> #include <thrust/replace.h> #include <thrust/functional.h> #include <iostream> int main(void) { // allocate three device_vectors with 10 elements thrust::device_vector<int> X(10); thrust::device_vector<int> Y(10); thrust::device_vector<int> Z(10); // initialize X to 0,1,2,3, .... thrust::sequence(X.begin(), X.end()); // compute Y = -X thrust::transform(X.begin(), X.end(), Y.begin(), thrust::negate<int>()); // fill Z with twos thrust::fill(Z.begin(), Z.end(), 2); // compute Y = X mod 2 thrust::transform(X.begin(), X.end(), Z.begin(), Y.begin(), thrust::modulus<int>()); // replace all the ones in Y with tens thrust::replace(Y.begin(), Y.end(), 1, 10); // print Y thrust::copy(Y.begin(), Y.end(), std::ostream_iterator<int>(std::cout, \"\\n\")); return 0; } SAXPY\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u3042\u308b\u304c\u3001\u7701\u7565\u3002 functor\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f5c\u6210\u3067\u304d\u308b\u3002 struct saxpy_functor { const float a; saxpy_functor(float _a) : a(_a) {} __host__ __device__ float operator()(const float& x, const float& y) const { return a * x + y; } }; \u8907\u96d1\u306a\u8a08\u7b97\u306f\u3001\u7c21\u5358\u306a\u8a08\u7b97\u306b\u5206\u89e3\u3057\u3066\u4f55\u56de\u304b\u306b\u5206\u3051\u3066\u5168\u4f53\u3092\u8a08\u7b97\u3059\u308b\u3088\u308a\u3001\u8907\u96d1\u306a\u8a08\u7b97\u30921\u56de\u3067\u307e\u3068\u3081\u3066\u5168\u4f53\u3092\u8a08\u7b97\u3059\u308b\u307b\u3046\u304c\u65e9\u3044\u3002 \u4f8b\u3048\u3070\u3001\u914d\u5217 a , b , x \u306b\u5bfe\u3057\u3066\u3001 a * x + b \u3092\u8a08\u7b97\u3059\u308b\u306a\u3089\u3001 a * x \u3092\u8a08\u7b97\u3057\u3066 b \u3092\u8db3\u3059\u3088\u308a a[i] * x[i] + b[i] \u3092\u8a08\u7b97\u3059\u308b\u307b\u3046\u304c\u65e9\u3044\u3002 thrust::transform \u306f1\u3064\u304b2\u3064\u306e\u5165\u529b\u5f15\u6570\u3057\u304b\u6301\u305f\u306a\u3044\u304c\u3001 \u3053\u306e\u4f8b \u3092\u4f7f\u3046\u30682\u3064\u3088\u308a\u591a\u3044\u5165\u529b\u3067\u30821\u56de\u3067\u51fa\u6765\u308b\u3002","title":"3.1 \u5909\u5f62"},{"location":"blog/thrust/#32-reductions","text":"\u7279\u306b\u6c17\u3092\u4ed8\u3051\u308b\u3053\u3068\u306f\u306a\u3044\u3002 \u8a73\u7d30\u306f \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3092\u53c2\u7167\u3002","title":"3.2 Reductions"},{"location":"blog/thrust/#33-prefix-sums","text":"","title":"3.3 Prefix-Sums"}]}